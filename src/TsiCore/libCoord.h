/*!\addtogroup libCoord
  \{
*/
//! \file libCoord.h Cодержит объявление функций для пересчета координат
#include <math.h>
#ifndef __LIBCOORD_H__
#define __LIBCOORD_H__

#ifdef __cplusplus
extern "C" {
#endif


/* Проекции:
   - Гаусса-Крюгера;
   - Меркатора.


   Эллипсоиды:
   - Красовского
   (длина большой полуоси: a=6378245.0 м,
   первый  эксцентриситет e=0.081813369);
   - WGS-84
   (длина большой полуоси: a=6378137.0 м,
   первый эксцентриситет e=0.08181979);
   - ПЗ-90
   (длина большой полуоси: a=6378136.0 м,
   первый эксцентриситет e=0.0818198).


   Системы геодезических координат:
   - СК-42 (эллипсоид Красовского);
   - WGS-84 (эллипсоид WGS-84);
   - ПЗ-90 (эллисоид ПЗ-90);
   - ПЗ-90.02 (эллисоид ПЗ-90).

   Система ПЗ-90.02 является уточненной версией системы ПЗ-90.
*/








/* Функция пересчета координат. Параметры функций:
 F - широта, гралус. Значение изменяется от -90 до 90.
 L - долгота, гралус. Значение изменяется от -180 до 180.
 H - высота, м.
 x - ордината, м.
 y - абсцисса, м.
 A - пеленг, градус. Значение изменяется от 0 до 360
 S - дальность, м.
 В случае, когда указанные величины выходят за границы области определения,
 функции возвращают ненулевое значение.
 В случае успешного преобразования функции возвращают нулевое значение.

 Функции KFLtoEllipseSA(), WFLtoEllipseSA(), PZ90_02FLtoEllipseSA() вычисляют расстояние и пеленг по геодезической линии (линия кратчайшего расстояния между точками).

 Функции KFLtoLoxodromeSA(), WFLtoLoxodromeSA(), PZ90_02FLtoLoxodromeSA() вычисляют расстояние и пеленг по локсодромии (угол между локсодромией и напрвлением на север одинаков для всех точек локсобромии )

 Расстояние и пеленг по геодезической линии не совпадают с локсодромическим расстоянием и пеленгом.
 */


//******************************************************************

/* Функции пересчета для эллипсоида Красовского */


//! Длина дуги меридиана
/*! Длина дуги меридиана эллипсоида Красовского между экватором и параллелью с широтой F.
  \param F Широта параллели, градус
  \return Длина дуги меридиана, м
*/
double KMeridianLength(double F);



/* Проекция Гаусса-Крюгера */


//! Вспомогательная функция преобразования геодезических координат в прямоугольные координаты проекции Гаусса-Крюгера.
/*! Вспомогательная функция преобразования геодезических координат эллипсоида Красовского
в прямоугольные координаты проекции Гаусса-Крюгера относительно произвольного осевого меридиана.
   \param F Широта, градус,
   \param x Плоские прямоугольные координаты,м
   \param y Плоские прямоугольные координаты,м
   \param d Разность между долготой данной точки и долготой осевого меридиана, градус
   \return 0 - успех
           иначе - ошибка
*/
int KFLtoGXYd(double F,double d,double* x, double* y);


//!  Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера.
/*! Преобразует геодезические координаты эллипсоида Красовского в прямоугольные координаты
проекции Гаусса-Крюгера относительно шестиградусной зоны.
  \param F Широта, градус
  \param L Долгота, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param n Номер шестиградусной зоны
  \return 0 - успех
          иначе - ошибка
*/
int KFLtoGXY(double F, double L, double* x, double* y, int *n);



//! Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера.
/*! Преобразует геодезические координаты эллипсоида Красовского в прямоугольные коодинаты
проекции Гаусса-Крюгера относительно реперной точки.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \return 0 - успех
          иначе - ошибка
*/
int KFLtoGXYr(double F,double L,double F0,double L0,double *x,double *y);/*Разность L-L0<30 градусов.*/



//! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера
относительно произвольного осевого меридиана в геодезические координаты эллипсоида Красовского.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F Широта, градус
  \param d Разность между долготой  данной точки и долготой осевого меридиана, градус
  \return 0 - успех
          иначе - ошибка
*/
int GXYtoKFLd(double x,double y,double* F,double* d);



//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно
шестиградусной зоны в геодезические координаты эллипсоида Красовского.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param n Номер шестиградусной зоны.
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int GXYtoKFL(double x,double y,int n,double* F,double* L);



//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно реперной точки в геодезические координаты эллипсоида Красовского.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int GXYtoKFLr(double x,double y,double F0,double L0,double *F,double *L);// Разность L-L0<30 градусов. */




/* Проекция Меркатора */


//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида Красовского в прямоугольные
координаты проекции Меркатора.
  \param F Широта, градус
  \param L Долгота, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \return 0 - успех
          иначе - ошибка
*/
int KFLtoMXY(double F,double L,double* x,double* y);





//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида Красовского в прямоугольные
коодинаты проекции Меркатора относительно реперной точки.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \return 0 - успех
          иначе - ошибка
*/
int KFLtoMXYr(double F,double L,double F0,double L0,double* x,double* y);



//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора в геодезические
координаты эллипсоида Красовского.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int MXYtoKFL(double x, double y,double* F, double* L);




//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора относительно реперной
точки в геодезические координаты эллипсоида Красовского.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int MXYtoKFLr(double x, double y,double F0,double L0,double* F, double* L);



/* Вычисление расстояний и направлений на эллипсоиде Красовского  */

//! Вычисление пеленга и дальности.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде Красовского.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Дальность, м
  \param A Пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int KFLtoEllipseSA(double F,double L,double F0,double L0,double* S,double* A);




//! Вычисление координат по пеленгу и дальности
/*! Вычисляет геодезические координаты эллипсоида Красовского по пеленгу и дальности.
  \param S Дальность, м
  \param A Пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int EllipseSAtoKFL(double S,double A,double F0,double L0,double *F,double *L);


//! Вычисление пеленга и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде Красовского с помощью
прямоугольных координат проекции Гаусса-Крюгера.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Дальность, м
  \param A Пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int KFLtoSA_GaussKruger(double F,double L,double F0,double L0,double* S,double* A);



//! Вычисление координат по пеленгу и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет геодезические координаты эллипсоида Красовского по пеленгу и дальности с
помощью прямоугольных координат проекции Гаусса-Крюгера.
  \param S Дальность, м
  \param A Пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int SAtoKFL_GaussKruger(double S,double A,double F0,double L0,double *F,double *L);



//! Вычисление поправок для определения пеленга и дальности на эллипсоиде Красовского при использовании прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет поправки для определения пеленга и дальности на эллипсоиде Красовского
при использовании координат проекции Гаусса-Крюгера.
  \param F_mid Средняя широта точек, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param P_S Поправка для вычисления расстояния, м
  \param P_A Поправка для вычисления азимута, градус
  \return 0 - успех
          иначе - ошибка
*/
int KPopravka(double F_mid,double x,double y,double* P_S,double* P_A);



//! Вычисление пеленга и дальности с помощью способа Бесселя.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде Красовского с помощью
способа Бесселя.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Дальность, м
  \param A Пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int KFLtoSA_Bessel(double F,double L,double F0,double L0,double* S,double* A);


//! Вычисление координат по пеленгу и дальности с помощью способа Бесселя.
/*! Вычисляет геодезические координаты эллипсоида Красовского по пеленгу и дальности
с помощью способа Бесселя.
  \param S Дальность, м
  \param A Пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int SAtoKFL_Bessel(double S,double A,double F0,double L0,double* F,double* L);


//! Вычисление длины локсодромии и локсодромический пеленг.
/*! Вычисляет длину локсодромии и локсодромический пеленг между точками на эллипсоиде Красовского.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Длина локсодромии, м
  \param A Локсодромический пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int KFLtoLoxodromeSA(double F,double L,double F0,double L0,double* S,double* A);


//! Вычисление координат по длине локсодромии и локсодромическому пеленгу.
/*! Вычисляет геодезические координаты эллипсоида Красовского по длине локсодромии и
локсодромическому пеленгу.
  \param S Длина локсодромии, м
  \param A Локсодромический пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int LoxodromeSAtoKFL(double S,double A,double F0,double L0,double* F,double* L);


//******************************************************************

/* Функции пересчета для эллипсоида WGS-84 */

//! Длина дуги меридиана
/*! Длина дуги меридиана эллипсоида WGS-84 между экватором и параллелью с широтой F.
  \param F Широта параллели, градус
  \return Длина дуги меридиана, м
*/
double WMeridianLength(double F);


/* Проекция Гаусса-Крюгера */

//! Вспомогательная функция преобразования геодезических координат в прямоугольные координаты проекции Гаусса-Крюгера.
/*! Вспомогательная функция преобразования геодезических координат эллипсоида WGS-84
в прямоугольные координаты проекции Гаусса-Крюгера относительно произвольного осевого меридиана.
   \param F Широта, градус,
   \param x Плоские прямоугольные координаты,м
   \param y Плоские прямоугольные координаты,м
   \param d Разность между долготой данной точки и долготой осевого меридиана, градус
   \return 0 - успех
           иначе - ошибка
*/
int WFLtoGXYd(double F, double d,double* x, double* y);




//!  Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера.
/*! Преобразует геодезические координаты эллипсоида WGS-84 в прямоугольные координаты
проекции Гаусса-Крюгера относительно шестиградусной зоны.
  \param F Широта, градус
  \param L Долгота, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param n Номер шестиградусной зоны
  \return 0 - успех
          иначе - ошибка
*/
int WFLtoGXY(double F, double L, double* x, double* y, int *n);





//! Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера относительно реперной точки.
/*! Преобразует геодезические координаты эллипсоида WGS-84 в прямоугольные координаты проекции Гаусса-Крюгера относительно реперной точки
\param[in] F Широта, градус
\param[in] L Долгота, градус
\param[in] F0 Широта репера, градус
\param[in] L0 Долгота репера, градус
\param[out] x Плоские прямоугольные координаты,м
\param[out] y Плоские прямоугольные координаты,м
\return 0 - успех
          иначе - ошибка

\attention Исправлял комментарий Марескин О.В. Возможно он неверен, как и старый вариант Моториной:
 Вычисление пеленга и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
 Вычисляет пеленг и дальность между точками на эллипсоиде WGS-84 с помощью
прямоугольных координат проекции Гаусса-Крюгера.
*/
int WFLtoGXYr(double F,double L,double F0,double L0,double *x,double *y);



//! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера
относительно произвольного осевого меридиана в геодезические координаты эллипсоида WGS-84.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F Широта, градус
  \param d Разность между долготой  данной точки и долготой осевого меридиана, градус
  \return 0 - успех
          иначе - ошибка
*/
int GXYtoWFLd(double x,double y,double* F,double* d);



//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно
шестиградусной зоны в геодезические координаты эллипсоида WGS-84.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param n Номер шестиградусной зоны.
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int GXYtoWFL(double x,double y,int n,double* F,double* L);




//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно реперной точки в геодезические координаты эллипсоида WGS-84.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int GXYtoWFLr(double x,double y,double F0,double L0,double *F,double *L);





/* Проекция Меркатора */


//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида WGS-84 в прямоугольные
координаты проекции Меркатора.
  \param F Широта, градус
  \param L Долгота, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \return 0 - успех
          иначе - ошибка
*/
int WFLtoMXY(double F,double L,double* x,double* y);




//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида WGS-84 в прямоугольные
коодинаты проекции Меркатора относительно реперной точки.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \return 0 - успех
          иначе - ошибка
*/
int WFLtoMXYr(double F,double L,double F0,double L0,double* x,double* y);




//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора в геодезические
координаты эллипсоида WGS-84.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int MXYtoWFL(double x, double y,double* F, double* L);




//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора относительно реперной
точки в геодезические координаты эллипсоида WGS-84.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int MXYtoWFLr(double x, double y,double F0,double L0,double* F, double* L);



/* Вычисление расстояний и направлений на эллипсоиде WGS-84 */


//! Вычисление пеленга и дальности.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде WGS-84.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Дальность, м
  \param A Пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int WFLtoEllipseSA(double F,double L,double F0,double L0,double* S,double* A);




//! Вычисление координат по пеленгу и дальности
/*! Вычисляет геодезические координаты эллипсоида WGS-84 по пеленгу и дальности.
  \param S Дальность, м
  \param A Пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int EllipseSAtoWFL(double S,double A,double F0,double L0,double *F,double *L);



//! Вычисление пеленга и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде WGS-84 с помощью
прямоугольных координат проекции Гаусса-Крюгера.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Дальность, м
  \param A Пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int WFLtoSA_GaussKruger(double F,double L,double F0,double L0,double* S,double* A);



//! Вычисление координат по пеленгу и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет геодезические координаты эллипсоида WGS-84 по пеленгу и дальности с
помощью прямоугольных координат проекции Гаусса-Крюгера.
  \param S Дальность, м
  \param A Пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int SAtoWFL_GaussKruger(double S,double A,double F0,double L0,double *F,double *L);




//! Вычисление поправок для определения пеленга и дальности на эллипсоиде Красовского при использовании прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет поправки для определения пеленга и дальности на эллипсоиде WGS-84
при использовании координат проекции Гаусса-Крюгера.
  \param F_mid Средняя широта точек, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param P_S Поправка для вычисления расстояния, м
  \param P_A Поправка для вычисления азимута, градус
  \return 0 - успех
          иначе - ошибка
*/
int WPopravka(double F_mid,double x,double y,double* P_S,double* P_A);



//! Вычисление пеленга и дальности с помощью способа Бесселя.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде WGS-84 с помощью
способа Бесселя.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Дальность, м
  \param A Пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int WFLtoSA_Bessel(double F,double L,double F0,double L0,double* S,double* A);



//! Вычисление координат по пеленгу и дальности с помощью способа Бесселя.
/*! Вычисляет геодезические координаты эллипсоида WGS-84 по пеленгу и дальности
с помощью способа Бесселя.
  \param S Дальность, м
  \param A Пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int SAtoWFL_Bessel(double S,double A,double F0,double L0,double* F,double* L);



//! Вычисление длины локсодромии и локсодромический пеленг.
/*! Вычисляет длину локсодромии и локсодромический пеленг между точками на эллипсоиде WGS-84.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Длина локсодромии, м
  \param A Локсодромический пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int WFLtoLoxodromeSA(double F,double L,double F0,double L0,double* S,double* A);


//! Вычисление координат по длине локсодромии и локсодромическому пеленгу.
/*! Вычисляет геодезические координаты эллипсоида WGS-84 по длине локсодромии и
локсодромическому пеленгу.
  \param S Длина локсодромии, м
  \param A Локсодромический пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int LoxodromeSAtoWFL(double S,double A,double F0,double L0,double* F,double* L);



//******************************************************************

/* Функции пересчета для эллипсоида ПЗ-90 */

//! Длина дуги меридиана
/*! Длина дуги меридиана эллипсоида ПЗ-90 между экватором и параллелью с широтой F.
  \param F Широта параллели, градус
  \return Длина дуги меридиана, м
*/
double PZ90MeridianLength(double F);


/* Проекция Гаусса-Крюгера */


//! Вспомогательная функция преобразования геодезических координат в прямоугольные координаты проекции Гаусса-Крюгера.
/*! Вспомогательная функция преобразования геодезических координат эллипсоида ПЗ-90
в прямоугольные координаты проекции Гаусса-Крюгера относительно произвольного осевого меридиана.
   \param F Широта, градус,
   \param x Плоские прямоугольные координаты,м
   \param y Плоские прямоугольные координаты,м
   \param d Разность между долготой данной точки и долготой осевого меридиана, градус
   \return 0 - успех
           иначе - ошибка
*/
int PZ90FLtoGXYd(double F, double d,double* x, double* y);



//!  Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера.
/*! Преобразует геодезические координаты эллипсоида ПЗ-90 в прямоугольные координаты
проекции Гаусса-Крюгера относительно шестиградусной зоны.
  \param F Широта, градус
  \param L Долгота, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param n Номер шестиградусной зоны
  \return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoGXY(double F, double L, double* x, double* y, int *n);



//! Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера относительно реперной точки.
/*! Преобразует геодезические координаты эллипсоида ПЗ-90 в прямоугольные координаты проекции Гаусса-Крюгера относительно реперной точки
\param[in] F Широта, градус
\param[in] L Долгота, градус
\param[in] F0 Широта репера, градус
\param[in] L0 Долгота репера, градус
\param[out] x Плоские прямоугольные координаты,м
\param[out] y Плоские прямоугольные координаты,м
\return 0 - успех
          иначе - ошибка

\attention Исправлял комментарий Марескин О.В. Возможно он неверен, как и старый вариант Моториной:
 Вычисление пеленга и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
 Вычисляет пеленг и дальность между точками на эллипсоиде ПЗ-90 с помощью
прямоугольных координат проекции Гаусса-Крюгера.
*/
int PZ90FLtoGXYr(double F,double L,double F0,double L0,double *x,double *y);



//! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера
относительно произвольного осевого меридиана в геодезические координаты эллипсоида ПЗ-90.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F Широта, градус
  \param d Разность между долготой  данной точки и долготой осевого меридиана, градус
  \return 0 - успех
          иначе - ошибка
*/
int GXYtoPZ90FLd(double x,double y,double* F,double* d);




//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно
шестиградусной зоны в геодезические координаты эллипсоида ПЗ-90.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param n Номер шестиградусной зоны.
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int GXYtoPZ90FL(double x,double y,int n,double* F,double* L);





//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно реперной точки в геодезические координаты эллипсоида ПЗ-90.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int GXYtoPZ90FLr(double x,double y,double F0,double L0,double *F,double *L);



/* Проекция Меркатора */


//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида ПЗ-90 в прямоугольные
координаты проекции Меркатора.
  \param F Широта, градус
  \param L Долгота, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoMXY(double F,double L,double* x,double* y);



//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида ПЗ-90 в прямоугольные
коодинаты проекции Меркатора относительно реперной точки.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoMXYr(double F,double L,double F0,double L0,double* x,double* y);




//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора в геодезические
координаты эллипсоида ПЗ-90.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int MXYtoPZ90FL(double x, double y,double* F, double* L);




//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора относительно реперной
точки в геодезические координаты эллипсоида ПЗ-90.
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int MXYtoPZ90FLr(double x, double y,double F0,double L0,double* F, double* L);



/* Вычисление расстояний и направлений на эллипсоиде ПЗ-90 */

//! Вычисление пеленга и дальности.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде ПЗ-90.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Дальность, м
  \param A Пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoEllipseSA(double F,double L,double F0,double L0,double* S,double* A);



//! Вычисление координат по пеленгу и дальности
/*! Вычисляет геодезические координаты эллипсоида ПЗ-90 по пеленгу и дальности.
  \param S Дальность, м
  \param A Пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int EllipseSAtoPZ90FL(double S,double A,double F0,double L0,double *F,double *L);



//! Вычисление пеленга и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде ПЗ-90 с помощью
прямоугольных координат проекции Гаусса-Крюгера.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Дальность, м
  \param A Пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoSA_GaussKruger(double F,double L,double F0,double L0,double* S,double* A);




//! Вычисление координат по пеленгу и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет геодезические координаты эллипсоида ПЗ-90 по пеленгу и дальности с
помощью прямоугольных координат проекции Гаусса-Крюгера.
  \param S Дальность, м
  \param A Пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int SAtoPZ90FL_GaussKruger(double S,double A,double F0,double L0,double *F,double *L);




//! Вычисление поправок для определения пеленга и дальности на эллипсоиде ПЗ-90 при использовании прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет поправки для определения пеленга и дальности на эллипсоиде Красовского
при использовании координат проекции Гаусса-Крюгера.
  \param F_mid Средняя широта точек, градус
  \param x Плоские прямоугольные координаты,м
  \param y Плоские прямоугольные координаты,м
  \param P_S Поправка для вычисления расстояния, м
  \param P_A Поправка для вычисления азимута, градус
  \return 0 - успех
          иначе - ошибка
*/
int PZ90Popravka(double F_mid,double x,double y,double* P_S,double* P_A);



//! Вычисление пеленга и дальности с помощью способа Бесселя.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде ПЗ-90 с помощью
способа Бесселя.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Дальность, м
  \param A Пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoSA_Bessel(double F,double L,double F0,double L0,double* S,double* A);


//! Вычисление координат по пеленгу и дальности с помощью способа Бесселя.
/*! Вычисляет геодезические координаты эллипсоида ПЗ-90 по пеленгу и дальности
с помощью способа Бесселя.
  \param S Дальность, м
  \param A Пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int SAtoPZ90FL_Bessel(double S,double A,double F0,double L0,double* F,double* L);




//! Вычисление длины локсодромии и локсодромический пеленг.
/*! Вычисляет длину локсодромии и локсодромический пеленг между точками на эллипсоиде ПЗ-90.
  \param F Широта, градус
  \param L Долгота, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param S Длина локсодромии, м
  \param A Локсодромический пеленг, градус
  \return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoLoxodromeSA(double F,double L,double F0,double L0,double* S,double* A);


//! Вычисление координат по длине локсодромии и локсодромическому пеленгу.
/*! Вычисляет геодезические координаты эллипсоида ПЗ-90 по длине локсодромии и
локсодромическому пеленгу.
  \param S Длина локсодромии, м
  \param A Локсодромический пеленг, градус
  \param F0 Широта репера, градус
  \param L0 Долгота репера, градус
  \param F Широта, градус
  \param L Долгота, градус
  \return 0 - успех
          иначе - ошибка
*/
int LoxodromeSAtoPZ90FL(double S,double A,double F0,double L0,double* F,double* L);



//******************************************************************

/* Функции преобразования между системами координат.
   Функции корректно работают при |F|<=89 градусов. */


// Функции преобразования координат между системами СК-42 и WGS-84.

//! Функция нахождения приращения геодезических координат при переходе между системами СК-42 и WGS-84.
/*! Находит приращение геодезических координат при переходе между системами СК-42 и WGS-84.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param dF Приращение широты, градус
  \param dL Приращение долготы, градус
  \param dH Приращение высоты, м
  \return 0 - успех
          иначе - ошибка
*/
int WK_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH);




//! Функция преобразования координат из системы WGS-84 в систему СК-42.
/*! Преобразует координаты из системы WGS-84 в систему СК-42.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int WGS84toSK42(double F1,double L1,double H1,double* F,double* L,double* H);




//! Функция преобразования координат из системы СК-42 в систему WGS-84.
/*!  Преобразует координаты из системы СК-42 в систему WGS-84.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int SK42toWGS84(double F1,double L1,double H1,double* F,double* L,double* H);




// Функции преобразования координат между системами ПЗ-90.02 и WGS-84.

//! Функция нахождения приращения геодезических координат при переходе между системами ПЗ-90.02 и WGS-84.
/*! Находит приращение геодезических координат при переходе между системами ПЗ-90.02 и WGS-84.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param dF Приращение широты, градус
  \param dL Приращение долготы, градус
  \param dH Приращение высоты, м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90_02W_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH);




//! Функция преобразования координат из системы WGS-84 в систему ПЗ-90.02
/*!  Преобразует координаты из системы WGS-84 в систему ПЗ-90.02
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int WGS84toPZ90_02(double F1,double L1,double H1,double* F,double* L,double* H);



//! Функция преобразования координат из системы ПЗ-90.02 в систему WGS-84.
/*!  Преобразует координаты из системы ПЗ-90.02 в систему WGS-84.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90_02toWGS84(double F1,double L1,double H1,double* F,double* L,double* H);



// Функции преобразования координат между системами ПЗ-90.02 и СК-42.

//! Функция нахождения приращения геодезических координат при переходе между системами ПЗ-90.02 и СК-42.
/*! Находит приращение геодезических координат при переходе между системами ПЗ-90.02 и СК-42.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param dF Приращение широты, градус
  \param dL Приращение долготы, градус
  \param dH Приращение высоты, м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90_02K_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH);




//! Функция преобразования координат из системы СК-42 в систему ПЗ-90.02.
/*!  Преобразует координаты из системы СК-42 в систему ПЗ-90.02.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int SK42toPZ90_02(double F1,double L1,double H1,double* F,double* L,double* H);




//! Функция преобразования координат из системы ПЗ-90.02 в систему СК-42.
/*! Преобразует координаты из системы ПЗ-90.02 в систему СК-42.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90_02toSK42(double F1,double L1,double H1,double* F,double* L,double* H);



// Функции преобразования координат между системами ПЗ-90.02 и ПЗ-90.

//! Функция нахождения приращения геодезических координат при переходе между системами ПЗ-90.02 и ПЗ-90.
/*! Находит приращение геодезических координат при переходе между системами ПЗ-90.02 и ПЗ-90.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param dF Приращение широты, градус
  \param dL Приращение долготы, градус
  \param dH Приращение высоты, м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90_02PZ90_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH);




//! Функция преобразования координат из системы ПЗ-90 в систему ПЗ-90.02.
/*! Преобразует координаты из системы ПЗ-90 в систему ПЗ-90.02.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90toPZ90_02(double F1,double L1,double H1,double* F,double* L,double* H);




//! Функция преобразования координат из системы ПЗ-90.02 в систему ПЗ-90.
/*! Преобразует координаты из системы ПЗ-90.02 в систему ПЗ-90.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90_02toPZ90(double F1,double L1,double H1,double* F,double* L,double* H);



// Функции преобразования координат между системами ПЗ-90 и СК-42.

//! Функция нахождения приращения геодезических координат при переходе между системами ПЗ-90 и СК-42.
/*! Находит приращение геодезических координат при переходе между системами ПЗ-90 и СК-42.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param dF Приращение широты, градус
  \param dL Приращение долготы, градус
  \param dH Приращение высоты, м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90K_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH);




//! Функция преобразования координат из системы СК-42 в систему ПЗ-90.
/*! Преобразует координаты из системы СК-42 в систему ПЗ-90.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int SK42toPZ90(double F1,double L1,double H1,double* F,double* L,double* H);




//! Функция преобразования координат из системы ПЗ-90 в систему СК-42.
/*!  Преобразует координаты из системы ПЗ-90 в систему СК-42.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90toSK42(double F1,double L1,double H1,double* F,double* L,double* H);



// Функции преобразования координат между системами ПЗ-90 и WGS-84.

//! Функция нахождения приращения геодезических координат при переходе между системами ПЗ-90 и WGS-84.
/*! Находит приращение геодезических координат при переходе между системами ПЗ-90 и WGS-84.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param dF Приращение широты, градус
  \param dL Приращение долготы, градус
  \param dH Приращение высоты, м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90W_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH);




//! Функция преобразования координат из системы WGS-84 в систему ПЗ-90.
/*! Преобразует координаты из системы WGS-84 в систему ПЗ-90.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int WGS84toPZ90(double F1,double L1,double H1,double* F,double* L,double* H);




//! Функция преобразования координат из системы ПЗ-90 в систему WGS-84.
/*! Преобразует координаты из системы ПЗ-90 в систему WGS-84.
  \param F1 Широта, градус
  \param L1 Долгота, градус
  \param H1 Высота, м
  \param F Широта, градус
  \param L Долгота, градус
  \param H Высота, м
  \return 0 - успех
          иначе - ошибка
*/
int PZ90toWGS84(double F1,double L1,double H1,double* F,double* L,double* H);


//******************************************************************


//! Перевод декартовой системы координат в полярную.
/*!  Переводит декартовую систему координат в полярную.
  \param x Декартовые координаты,м
  \param y Декартовые  координаты,м
  \param r Модуль радиус-вектора, м
  \param f Угол между радиус-вектором и положительным направлением оси ox, градус
  \return 0 - успех
          иначе - ошибка
*/
int XYtoPolar(double x,double y,double* r,double* f);




//! Перевод полярной системы координат в декартовую.
/*!  Переводит полярную систему координат в декартовую.
  \param r Модуль радиус-вектора, м
  \param f Угол между радиус-вектором и положительным направлением оси ox, градус
  \param x Декартовые координаты,м
  \param y Декартовые  координаты,м
  \return 0 - успех
          иначе - ошибка
*/
int PolartoXY(double r,double f,double* x,double* y);


#ifdef __cplusplus
}
#endif
#endif

/* \} */
