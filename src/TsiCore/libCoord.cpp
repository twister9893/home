/*!\addtogroup libCoord
  \{
*/
//! \file libCoord.cpp Содержит реализацию функций для пересчета координат
#include<stdlib.h>
#include<stdio.h>
#include<math.h>
#include<string.h>
#include"libCoord.h"
#define COUNTDEG 57.29577951
#define W_A 6378137.0
#define W_E 0.08181979
#define W_E2 W_E*W_E
#define K_A 6378245.0
#define K_E 0.081813369
#define K_E2 K_E*K_E
#define PZ90_A 6378136.0
#define PZ90_E 0.0818198
#define PZ90_E2 PZ90_E*PZ90_E
#define WK_DX -23.57
#define WK_DY 140.95
#define WK_DZ 80.16
#define WK_WX 0
#define WK_WY 0.0000972222
#define WK_WZ 0.0002194444
#define WK_M 0.00000022
#define PZ90_02K_DX -23.93
#define PZ90_02K_DY 141.03
#define PZ90_02K_DZ 79.98
#define PZ90_02K_WX 0
#define PZ90_02K_WY 0.0000972222
#define PZ90_02K_WZ 0.0002194444
#define PZ90_02K_M 0.00000022
#define PZ90_02W_DX -0.36
#define PZ90_02W_DY 0.08
#define PZ90_02W_DZ 0.18
#define PZ90_02PZ90_DX 1.07
#define PZ90_02PZ90_DY 0.03
#define PZ90_02PZ90_DZ -0.02
#define PZ90_02PZ90_WX 0
#define PZ90_02PZ90_WY 0
#define PZ90_02PZ90_WZ 0.0000361111
#define PZ90_02PZ90_M 0.00000022
#define PZ90K_DX -25
#define PZ90K_DY 141
#define PZ90K_DZ 80
#define PZ90K_WX 0
#define PZ90K_WY 0.0000972222
#define PZ90K_WZ 0.0001833333
#define PZ90K_M 0
#define PZ90W_DX -1.1
#define PZ90W_DY -0.3
#define PZ90W_DZ -0.9
#define PZ90W_WX 0
#define PZ90W_WY 0
#define PZ90W_WZ -0.0000555555
#define PZ90W_M -0.00000012


//******************************************************************

// Константы

//! Число радиан в одном градусе
const double CountDeg=COUNTDEG;

//! Вспомогательная величина
const double PI_2=M_PI/2.0;/* PI/2 */

//! Вспомогательная величина
const double PI2=2.0*M_PI;/* 2PI */

//! Вспомогательная величина
const double PI3_2=1.5*M_PI;/* 3PI/2 */




// Параметры эллипсоида WGS-84

//! Длина большой полуоси, м
const double W_a=W_A;

//! Первый эксцентриситет
const double W_e=W_E;

//! Квадрат первого эксцентриситета
const double W_e2=W_E2;




// Параметры эллипсоида Красовского

//! Длина большой полуоси, м
const double K_a=K_A;

//! Первый  эксцентриситет
const double K_e=K_E;

//! Квадрат первого эксцентриситета
const double K_e2=K_E2;




// Параметры эллипсоида PZ-90

//! Длина большой полуоси, м
const double PZ90_a=PZ90_A;

//! Первый эксцентриситет
const double PZ90_e=PZ90_E;

//! Квадрат первого эксцентриситета
const double PZ90_e2=PZ90_E2;





// Параметры преобразования координат между системами СК-42 и WGS-84

//! Линейные элементы трансформирования
const double WK_dX=WK_DX;

//! Линейные элементы трансформирования
const double WK_dY=WK_DY;

//! Линейные элементы трансформирования
const double WK_dZ=WK_DZ;

//! Угловые элементы трансформирования
const double WK_wy=WK_WY;

//! Угловые элементы трансформирования
const double WK_wz=WK_WZ;

//! Угловые элементы трансформирования
const double WK_wy_rad=WK_WY/COUNTDEG;

//! Масштабный коэффициент
const double WK_m=WK_M;

//! Средняя длина больших полуосей, м
const double WK_a=(W_A+K_A)/2.0;

//! Средний квадрат первых эксцентриситетов
const double WK_e2=(W_E2+K_E2)/2.0;

//! Разность больших полуосей, м
const double WK_da=K_A-W_A;

//! Разность квадратов первых эксцентриситетов
const double WK_de2=K_E2-W_E2;





// Параметры преобразования координат между системами ПЗ-90.02 и WGS-84

//! Линейные элементы трансформирования
const double PZ90_02W_dX=PZ90_02W_DX;

//! Линейные элементы трансформирования
const double PZ90_02W_dY=PZ90_02W_DY;

//! Линейные элементы трансформирования
const double PZ90_02W_dZ=PZ90_02W_DZ;

//! Средняя длина больших полуосей, м
const double PZ90_02W_a=(PZ90_A+W_A)/2.0;

//! Средний квадрат первых эксцентриситетов
const double PZ90_02W_e2=(PZ90_E2+W_E2)/2.0;

//! Разность больших полуосей, м
const double PZ90_02W_da=W_A-PZ90_A;

//! Разность квадратов первых эксцентриситетов
const double PZ90_02W_de2=W_E2-PZ90_E2;





// Параметры преобразования координат между системами ПЗ-90.02 и СК-42

//! Линейные элементы трансформирования
const double PZ90_02K_dX=PZ90_02K_DX;

//! Линейные элементы трансформирования
const double PZ90_02K_dY=PZ90_02K_DY;

//! Линейные элементы трансформирования
const double PZ90_02K_dZ=PZ90_02K_DZ;

//! Угловые элементы трансформирования
const double PZ90_02K_wy=PZ90_02K_WY;

//! Угловые элементы трансформирования
const double PZ90_02K_wz=PZ90_02K_WZ;

//! Угловые элементы трансформирования
const double PZ90_02K_wy_rad=PZ90_02K_WY/COUNTDEG;

//! Масштабный коэффициент
const double PZ90_02K_m=PZ90_02K_M;

//! Средняя длина больших полуосей, м
const double PZ90_02K_a=(PZ90_A+K_A)/2.0;

//! Средний квадрат первых эксцентриситетов
const double PZ90_02K_e2=(PZ90_E2+K_E2)/2.0;

//! Разность больших полуосей, м
const double PZ90_02K_da=K_A-PZ90_A;

//! Разность квадратов первых эксцентриситетов
const double PZ90_02K_de2=K_E2-PZ90_E2;




// Параметры преобразования координат между системами ПЗ-90.02 и ПЗ-90

//! Линейные элементы трансформирования
const double PZ90_02PZ90_dX=PZ90_02PZ90_DX;

//! Линейные элементы трансформирования
const double PZ90_02PZ90_dY=PZ90_02PZ90_DY;

//! Линейные элементы трансформирования
const double PZ90_02PZ90_dZ=PZ90_02PZ90_DZ;

//! Угловые элементы трансформирования
const double PZ90_02PZ90_wz=PZ90_02PZ90_WZ;

//! Масштабный коэффициент
const double PZ90_02PZ90_m=PZ90_02PZ90_M;




// Параметры преобразования координат между системами ПЗ-90 и СК-42

//! Линейные элементы трансформирования
const double PZ90K_dX=PZ90K_DX;
//! Линейные элементы трансформирования
const double PZ90K_dY=PZ90K_DY;
//! Линейные элементы трансформирования
const double PZ90K_dZ=PZ90K_DZ;



//! Угловые элементы трансформирования
const double PZ90K_wy=PZ90K_WY;

//! Угловые элементы трансформирования
const double PZ90K_wz=PZ90K_WZ;

//! Угловые элементы трансформирования
const double PZ90K_wy_rad=PZ90K_WY/COUNTDEG;

//! Средняя длина больших полуосей, м
const double PZ90K_a=(PZ90_A+K_A)/2.0;

//! Средний квадрат первых эксцентриситетов
const double PZ90K_e2=(PZ90_E2+K_E2)/2.0;

//! Разность больших полуосей, м
const double PZ90K_da=K_A-PZ90_A;

//! Разность квадратов первых эксцентриситетов
const double PZ90K_de2=K_E2-PZ90_E2;




// Параметры преобразования координат между системами ПЗ-90 и WGS-84

//! Линейные элементы трансформирования
const double PZ90W_dX=PZ90W_DX;

//! Линейные элементы трансформирования
const double PZ90W_dY=PZ90W_DY;

//! Линейные элементы трансформирования
const double PZ90W_dZ=PZ90W_DZ;

//! Угловые элементы трансформирования
const double PZ90W_wz=PZ90W_WZ;

//! Масштабный коэффициент
const double PZ90W_m=PZ90W_M;

//! Средняя длина больших полуосей, м
const double PZ90W_a=(PZ90_A+W_A)/2.0;

//! Средний квадрат первых эксцентриситетов
const double PZ90W_e2=(PZ90_E2+W_E2)/2.0;

//! Разность больших полуосей, м
const double PZ90W_da=W_A-PZ90_A;

//! Разность квадратов первых эксцентриситетов
const double PZ90W_de2=W_E2-PZ90_E2;



/* Используемые обозначения:
   F Широта, градус
   L Долгота, градус
   A Пеленг, градус
   H Высота, м
   x Плоские прямоугольные координаты,м
   y Плоские прямоугольные координаты,м
   S Расстояние, м
*/



//******************************************************************

/* Функции пересчета для эллипсоида Красовского */


//! Длина дуги меридиана
/*! Длина дуги меридиана эллипсоида Красовского между экватором и параллелью с широтой F.
\param F Широта параллели, градус
\return Длина дуги меридиана, м
*/
double KMeridianLength(double F)
{
  double sinF,sinF2;
  F=F/CountDeg;/* Перевод широты из градусов в радианы */
  sinF=sin(F);
  sinF2=sinF*sinF;
  return (6367558.4968*F-2.0*sinF*cos(F)*(16002.89+66.9607*sinF2+0.3515*sinF2*sinF2));
}


/* Проекция Гаусса-Крюгера */


//! Вспомогательная функция преобразования геодезических координат в прямоугольные координаты проекции Гаусса-Крюгера.
/*! Вспомогательная функция преобразования геодезических координат эллипсоида Красовского
в прямоугольные координаты проекции Гаусса-Крюгера относительно произвольного осевого меридиана.
\param F Широта, градус,
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param d Разность между долготой данной точки и долготой осевого меридиана, градус
\return 0 - успех
           иначе - ошибка
*/
int KFLtoGXYd(double F,double d,double* x, double* y)
{
  double d2,sinF,cosF,sinF2,sinF4,sinF6;
  d=d/CountDeg;
  F=F/CountDeg;/* Перевод широты из градусов  в радианы */
  d2=d*d;
  sinF=sin(F);
  cosF=cos(F);
  sinF2=sinF*sinF;
  sinF4=sinF2*sinF2;
  sinF6=sinF4*sinF2;
  *x=6367558.4968*F-2.0*sinF*cosF*(16002.89+66.9607*sinF2+0.3515*sinF4-
                                   d2*(1594561.25+5336.535*sinF2+26.79*sinF4+0.149*sinF6+
                                       d2*(672483.4-811219.9*sinF2+5420.0*sinF4-10.6*sinF6+
                                           d2*(278194.0-830174.0*sinF2+572434.0*sinF4-16010.0*sinF6+
                                               d2*(109500.0-574700.0*sinF2+863700.0*sinF4-398600.0*sinF6)))));
  *y=d*cosF*(6378245.0+21346.1415*sinF2+107.159*sinF4+0.5977*sinF6+
             d2*(1070204.16-2136826.66*sinF2+17.98*sinF4-11.99*sinF6+
                 d2*(270806.0-1523417.0*sinF2+1327645.0*sinF4-21701.0*sinF6+
                     d2*(79690.0-866190.0*sinF2+1730360.0*sinF4-945460.0*sinF6))));
  return 0;
}

//!  Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера.
/*! Преобразует геодезические координаты эллипсоида Красовского в прямоугольные координаты
проекции Гаусса-Крюгера относительно шестиградусной зоны.
\param F Широта, градус
\param L Долгота, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param n Номер шестиградусной зоны
\return 0 - успех
          иначе - ошибка
*/
int KFLtoGXY(double F, double L, double* x, double* y, int *n)
{
  *x=0.0;
  *y=0.0;
  *n=0;
  if(fabs(F)>=90.0 || fabs(L)>180.0) return 1;
  if(L<0.0) L+=360.0;
  *n=(int)((L+6.0)/6.0);
  KFLtoGXYd(F,L-((*n)*6-3),x,y);/* (*n)*6-3 - долгота осевого меридиана
                                    шестиградусной зоны с номером n */
  *y+=500000.0; /* 500 000 м - смещение начала координат на запад */
  return 0;
}


//! Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера.
/*! Преобразует геодезические координаты эллипсоида Красовского в прямоугольные коодинаты
проекции Гаусса-Крюгера относительно реперной точки.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\return 0 - успех
          иначе - ошибка
*/
int KFLtoGXYr(double F,double L,double F0,double L0,double *x,double *y)/*Разность L-L0<30 градусов.*/
{
  double d;
  *x=0.0;
  *y=0.0;
  if(fabs(F)>=90.0 || fabs(L)>180.0 || fabs(F0)>=90.0 || fabs(L0)>180.0) return 1;
  d=L-L0;
  if(d>180.0) d-=360.0;
  else if(d<-180.0) d+=360.0;
  if(fabs(d)>30.0) return 1;
  KFLtoGXYd(F,d,x,y); /* Вычисление прямоугольных координат относитнльно
                                          меридиана с долготой L0 */
               /* x - координата относительно экватора */

  *x=*x-KMeridianLength(F0);
   /* Для получения координаты x относительно реперной точки из координаты x относительно
    экватора вычитается длина дуги осевого меридиана между экватором и параллелью F0 */
  return 0;
}


//! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера
относительно произвольного осевого меридиана в геодезические координаты эллипсоида Красовского.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F Широта, градус
\param d Разность между долготой  данной точки и долготой осевого меридиана, градус
\return 0 - успех
          иначе - ошибка
*/
int GXYtoKFLd(double x,double y,double* F,double* d)
{
  double f;/* вспомогательная величина */
  double f0;/* широта точки, абсцисса
                          которой равна абсциссе x определяемой точки, а ордината равна 0 */
  double sinf,cosf,sinf2,sinf4,sinf6;
  double z,z2;/* вспомогательные величины */
  double F_res,d_res;
  f=x/6367558.4968;/* 6367558.4968 м - радиус сферы, длина дуги меридиана которой
            от эквато ра до полюса равна длине дуги меридиана эллипсоида
                              от экватора до полюса */

  sinf=sin(f);
  sinf2=sinf*sinf;
  f0=f+sin(2.0*f)*(0.00252588685-0.0000149186*sinf2+0.00000011904*sinf2*sinf2);/* широта точки, абсцисса
                             которой равна абсциссе x определяемой точки, а ордината равна 0 */
  cosf=cos(f0);
  if(cosf==0.0) return 1;
  sinf=sin(f0);
  sinf2=sinf*sinf;
  sinf4=sinf2*sinf2;
  sinf6=sinf2*sinf4;
  z=y/(6378245.0*cosf);/* вспомогательная величина */
  z2=z*z;
  F_res=CountDeg*(f0-2.0*z2*cosf*sinf*
                  (0.251684631-0.003369263*sinf2+0.000011276*sinf4-
                   z2*(0.10500614-0.04559916*sinf2+0.00228901*sinf4-0.00002987*sinf6-
                       z2*(0.042858-0.025318*sinf2+0.014346*sinf4-0.001264*sinf6-
                           z2*(0.01672-0.0063*sinf2+0.01188*sinf4-0.00328*sinf6)))));
  d_res=CountDeg*z*(1.0-0.0033467108*sinf2-0.0000056002*sinf4-0.0000000187*sinf6-
                    z2*(0.16778975+0.16273586*sinf2-0.0005249*sinf4-0.00000846*sinf6-
                        z2*(0.042002501+0.1487407*sinf2+0.005942*sinf4-0.000015*sinf6-
                            z2*(0.01225+0.09477*sinf2+0.03282*sinf4-0.00034*sinf6-
                                z2*(0.0038+0.0524*sinf2+0.0482*sinf4+0.0032*sinf6)))));
  if(fabs(F_res)>=90.0 || fabs(d_res)>30.0) return 1;
  *F=F_res;
  *d=d_res;
  return 0;
}


//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно
шестиградусной зоны в геодезические координаты эллипсоида Красовского.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param n Номер шестиградусной зоны.
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int GXYtoKFL(double x,double y,int n,double* F,double* L)
{
  *F=0.0;
  *L=0.0;
  if(n<0||n>60)  return 1;
  y-=500000.0;
  if(GXYtoKFLd(x,y,F,L))/* L - долгота точки отрносительно осевого меридиана */
    return 1;
  *L+=n*6.0-3.0;/* n*6-3 - долгота осевого меридиана зоны с номером n */
  if(*L>180.0) *L-=360.0;
  else if(*L<=-180.0) *L+=360.0;
  return 0;
}


//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно реперной точки в геодезические координаты эллипсоида Красовского.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int GXYtoKFLr(double x,double y,double F0,double L0,double *F,double *L)// Разность L-L0<30 градусов. */
{
  *F=0.0;
  *L=0.0;
  if(fabs(F0)>=90.0 || fabs(L0)>180.0) return 1;
   /* Вычисляется координата x относительно экватора. К значению координаты x относительно
   параллели F0 прибавляется длина дуги меридиана от экватора до параллекли F0 */
  x=x+KMeridianLength(F0);
  if(GXYtoKFLd(x,y,F,L))/* L - долгота точки отрносительно осевого меридиана */
    return 1;
  *L+=L0;
  if(*L>180.0) *L-=360.0;
  else if(*L<=-180.0) *L+=360.0;
  return 0;
}



/* Проекция Меркатора */


//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида Красовского в прямоугольные
координаты проекции Меркатора.
\param F Широта, градус
\param L Долгота, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\return 0 - успех
          иначе - ошибка
*/
int KFLtoMXY(double F,double L,double* x,double* y)
{
  double sinF;
  if (fabs(F)>=89.9 || fabs(L)>180.0)
  {
    *x=0.0;
    *y=0.0;
    return 1;
  }
  F=F/CountDeg;
  sinF=sin(F);
  *x=K_a*(log((1.0+sinF)/((1.0-sinF)))-
          K_e*log((1.0+K_e*sinF)/((1.0-K_e*sinF))))/2.0;
  *y=K_a*L/CountDeg;
  return 0;
}




//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида Красовского в прямоугольные
коодинаты проекции Меркатора относительно реперной точки.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\return 0 - успех
          иначе - ошибка
*/
int KFLtoMXYr(double F,double L,double F0,double L0,double* x,double* y)
{
  double sinF,sinF0;
  if (fabs(F)>=89.9 || fabs(F0)>=89.9 || fabs(L)>180.0 || fabs(L0)>180.0)
  {
    *x=0.0;
    *y=0.0;
    return 1;
  }
  F=F/CountDeg;
  F0=F0/CountDeg;
  sinF=sin(F);
  sinF0=sin(F0);
  *x=K_a*(log((1.0+sinF)*(1.0-sinF0)/((1.0-sinF)*(1.0+sinF0)))-
          K_e*log((1.0+K_e*sinF)*(1.0-K_e*sinF0)/((1.0-K_e*sinF)*(1.0+K_e*sinF0))))/2.0;
  L-=L0;
  if(L>180.0) L-=360.0;
  else if(L<=-180.0) L+=360.0;
  *y=K_a*L/CountDeg;
  return 0;
}


//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора в геодезические
координаты эллипсоида Красовского.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int MXYtoKFL(double x, double y,double* F, double* L)
{
  double q,sinq,sin2q,sin4q,sin6q,e6,e8,F_res,L_res;
  q=PI_2-2.0*atan(exp(-x/K_a));
  sinq=sin(q);
  sin2q=sinq*sinq;
  sin4q=sin2q*sin2q;
  sin6q=sin4q*sin2q;
  e6=K_e2*K_e2*K_e2;
  e8=e6*K_e2;
  L_res=CountDeg*y/K_a;
  F_res=CountDeg*(q+cos(q)*sinq*(0.0067385313-0.0000531286593*sin2q+
                              0.000000574643793*sin4q-0.00000000681657*sin6q));
  if(fabs(F_res)>=90.0 || fabs(L_res)>180.0)
  {
    *F=0.0;
    *L=0.0;
    return 1;
  }
  *F=F_res;
  *L=L_res;
  return 0;

}



//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора относительно реперной
точки в геодезические координаты эллипсоида Красовского.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int MXYtoKFLr(double x, double y,double F0,double L0,double* F, double* L)
{
  double sinF0;
  if (fabs(F0)>=89.9 || fabs(L0)>180.0)
  {
    *F=0.0;
    *L=0.0;
    return 1;
  }
  F0=F0/CountDeg;
  sinF0=sin(F0);
  x+=K_a*(log((1.0+sinF0)/(1.0-sinF0))-K_e*log((1.0+K_e*sinF0)/(1.0-K_e*sinF0)))/2.0;/* вычисление значения
                         координаты x относительно экватора */
  if (MXYtoKFL(x,y,F,L))
  {
    return 1;
  }
  *L+=L0;
  if (*L>180.0) *L-=360.0;
  else if (*L<=-180.0) *L+=360.0;
  return 0;

}


/* Вычисление расстояний и направлений на эллипсоиде Красовского  */

//! Вычисление пеленга и дальности.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде Красовского.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Дальность, м
\param A Пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int KFLtoEllipseSA(double F,double L,double F0,double L0,double* S,double* A)
{
  if(fabs(F-F0)>3.0 || fabs(L-L0)>3.0 || fabs(F)>=85.0 || fabs(F0)>=85.0)
    return KFLtoSA_Bessel(F,L,F0,L0,S,A);
  return KFLtoSA_GaussKruger(F,L,F0,L0,S,A);
}



//! Вычисление координат по пеленгу и дальности
/*! Вычисляет геодезические координаты эллипсоида Красовского по пеленгу и дальности.
\param S Дальность, м
\param A Пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int EllipseSAtoKFL(double S,double A,double F0,double L0,double *F,double *L)
{
  if(S>300000.0)
    return SAtoKFL_Bessel(S,A,F0,L0,F,L);
  return SAtoKFL_GaussKruger(S,A,F0,L0,F,L);
}

//! Вычисление пеленга и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде Красовского с помощью
прямоугольных координат проекции Гаусса-Крюгера.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Дальность, м
\param A Пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int KFLtoSA_GaussKruger(double F,double L,double F0,double L0,double* S,double* A)
{
  double x,y,P_S,P_A;
  if(KFLtoGXYr(F,L,F0,L0,&x,&y)) /* Вычисление прямоугольных координат проекции Гаусса-Крюгера */
  {
    *S=0.0;
    *A=0.0;
    return 1;
  }
  XYtoPolar(x,y,S,A);
  /* Вычисление редукций расстояния и напрвления */
  KPopravka((F+F0)/2.0,x,y,&P_S,&P_A);
  *S=(*S)*P_S;
  *A+=P_A;
  if(*S<=0.0001)
  {
    *A=0.0;
  }
  return 0;
}


//! Вычисление координат по пеленгу и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет геодезические координаты эллипсоида Красовского по пеленгу и дальности с
помощью прямоугольных координат проекции Гаусса-Крюгера.
\param S Дальность, м
\param A Пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int SAtoKFL_GaussKruger(double S,double A,double F0,double L0,double *F,double *L)
{
  double x,y,P_S,P_A;
  *F=0.0;
  *L=0.0;
  if(S<=0.0001)
  {
    *F=F0;
    *L=L0;
    return 0;
  }
  if(PolartoXY(S,A,&x,&y))  return 1;
  if(GXYtoKFLr(x,y,F0,L0,F,L)) return 1;
     /* Вычисление редукция расстояния и направления */
  KPopravka((*F+F0)/2.0,x,y,&P_S,&P_A);
  S=S/P_S;
  A-=P_A;
  PolartoXY(S,A,&x,&y);
  return GXYtoKFLr(x,y,F0,L0,F,L);
}


//! Вычисление поправок для определения пеленга и дальности на эллипсоиде Красовского при использовании прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет поправки для определения пеленга и дальности на эллипсоиде Красовского
при использовании координат проекции Гаусса-Крюгера.
\param F_mid Средняя широта точек, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param P_S Поправка для вычисления расстояния, м
\param P_A Поправка для вычисления азимута, градус
\return 0 - успех
          иначе - ошибка
*/
int KPopravka(double F_mid,double x,double y,double* P_S,double* P_A)
{
  double sinFm,v,Rm_1,w;
  F_mid=F_mid/CountDeg;
  sinFm=sin(F_mid);
  sinFm=sinFm*sinFm;
  v=1.0-K_e2*sinFm;
  Rm_1=v*v/(40409707455043.5);
  w=y*y*Rm_1;
  *P_S=1.0-w/6.0*(1.0-w/4.0);
  *P_A=CountDeg*(x*y*Rm_1/6.0*(1.0-y*Rm_1/8.0)+(w*y*v*sin(2.0*F_mid))/7546889558.67119);
return 0;
}


//! Вычисление пеленга и дальности с помощью способа Бесселя.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде Красовского с помощью
способа Бесселя.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Дальность, м
\param A Пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int KFLtoSA_Bessel(double F,double L,double F0,double L0,double* S,double* A)
{
  double sinF1,sinF2,w1,w2,sin_u1,sin_u2,cos_u1,cos_u2,
    a1,a2,b1,b2,dl,d,d0,v,p,q,A1,sinA0,cos2A0,sinA1,cos_v,s1,cos_s,sin_s,x,y,alf,bet,A_,B_,C_;
  if(fabs(F0)>90.0 || fabs(F)>90.0 || fabs(L)>180.0 || fabs(L0)>180.0)
  {
    *S=0.0;
    *A=0.0;
    return 1;
  }
  F0=F0/CountDeg;
  F=F/CountDeg;
  sinF1=sin(F0);
  sinF2=sin(F);
  w1=sqrt(1.0-K_e2*sinF1*sinF1);
  w2=sqrt(1.0-K_e2*sinF2*sinF2);
  sin_u1=(0.9966476672*sinF1)/w1;
  sin_u2=(0.9966476672*sinF2)/w2;
  cos_u1=cos(F0)/w1;
  cos_u2=cos(F)/w2;
  a1=sin_u1*sin_u2;
  a2=cos_u1*cos_u2;
  b1=cos_u1*sin_u2;
  b2=sin_u1*cos_u2;
  dl=(L-L0)/CountDeg;
  if(dl>M_PI) dl-=PI2;
  else if(dl<-M_PI) dl+=PI2;
  d=0.0;
  d0=1.0;
  while(fabs(d-d0)>=0.0000001)
  {
    d0=d;
    v=dl+d0;
    cos_v=cos(v);
    p=cos_u2*sin(v);
    q=b1-b2*cos_v;
    if(q==0.0)
    {
      if(fabs(L-L0)==180.0)
      {
        if(L>=L0)
          A1=PI_2;
        else
          A1=PI3_2;
      }
      else
      {
        if(p>=0.0)
          A1=PI_2;
        else
          A1=PI3_2;
      }
    }
    else
    {
      A1=atan(p/q);
      if(q<0.0)
      {
        A1=M_PI+A1;
      }
      else if(p<0.0)
        A1=PI2+A1;
    }
    sinA1=sin(A1);
    cos_s=a1+a2*cos_v;
    sin_s=p*sinA1+q*cos(A1);
    if(cos_s==0.0)
      s1=PI_2;
    else
    {
      s1=fabs(atan(sin_s/cos_s));
      if(cos_s<0.0) s1=M_PI-s1;
    }
    sin_s=sin(s1);
    cos_s=cos(s1);
    sinA0=cos_u1*sinA1;
    cos2A0=(1.0-sinA0*sinA0);
    x=2.0*a1-cos2A0*cos_s;
    alf=0.003352333-(0.0000028189-0.000000007*cos2A0)*cos2A0;
    bet=(0.0000028189-0.0000000094*cos2A0)*cos2A0;
    d=(alf*s1-bet*x*sin_s)*sinA0;

  }
  y=(cos2A0*cos2A0-2.0*x*x)*cos_s;
  A_=6356863.02+(10708.949-13.474*cos2A0)*cos2A0;
  B_=10708.938-17.956*cos2A0;
  C_=4.487;
  *A=CountDeg*A1;
  *S=A_*s1+(B_*x+C_*y)*sin_s;
  if(*S<=0.0001)
  {
    *A=0.0;
  }
  return 0;

}

//! Вычисление координат по пеленгу и дальности с помощью способа Бесселя.
/*! Вычисляет геодезические координаты эллипсоида Красовского по пеленгу и дальности
с помощью способа Бесселя.
\param S Дальность, м
\param A Пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int SAtoKFL_Bessel(double S,double A,double F0,double L0,double* F,double* L)
{
  double sinF1,w1,sin_u1,sin_u2,cos_u1,sinA0,cos2A0,sinA,cosA,ctg_s1,ctg2_s1,sin_2s1,cos_2s1,
    A_,B_,C_,alf,bet,s0,s,sin_s,cos_s,sin_2s0,cos_2s0,sin_2s,cos_2s,d,dl,p,q,F_res,L_res;
  if(S<=0.0001)
  {
    *F=F0;
    *L=L0;
    return 0;
  }
  *F=0.0;
  *L=0.0;
  if(fabs(F0)>90.0 || fabs(L0)>180.0)
  {
    return 1;
  }
  F0=F0/CountDeg;
  A=A/CountDeg;
  sinF1=sin(F0);
  sinA=sin(A);
  cosA=cos(A);
  w1=sqrt(1.0-K_e2*sinF1*sinF1);
  sin_u1=(0.9966476672*sinF1)/w1;
  cos_u1=cos(F0)/w1;
  sinA0=cos_u1*sin(A);
  cos2A0=1.0-sinA0*sinA0;
  A_=6356863.02+(10708.949-13.477*cos2A0)*cos2A0;
  B_=(5354.469-8.978*cos2A0)*cos2A0;
  C_=2.238*cos2A0*cos2A0+0.006;
  alf=0.003352333-(0.0000028189-0.000000007*cos2A0)*cos2A0;
  bet=(0.0000014094-0.0000000047*cos2A0)*cos2A0;
  if(sin_u1==0.0)
  {
    sin_2s1=0.0;
    cos_2s1=1.0;
  }
  else
  {
    ctg_s1=(cos_u1*cosA)/sin_u1;
    ctg2_s1=ctg_s1*ctg_s1;
    sin_2s1=(2.0*ctg_s1)/(ctg2_s1+1.0);
    cos_2s1=(ctg2_s1-1.0)/(ctg2_s1+1.0);
  }
  s0=(S-(B_+C_*cos_2s1)*sin_2s1)/A_;
  sin_2s0=sin(2.0*s0);
  cos_2s0=cos(2.0*s0);
  sin_2s=sin_2s0*cos_2s1+cos_2s0*sin_2s1;
  cos_2s=cos_2s0*cos_2s1-sin_2s0*sin_2s1;
  s=s0+((B_+5.0*C_*cos_2s)*sin_2s)/A_;
  sin_s=sin(s);
  cos_s=cos(s);
  d=(alf*s+bet*(sin_2s-sin_2s1))*sinA0;
  sin_u2=sin_u1*cos_s+cos_u1*sin_s*cosA;
  p=sinA*sin_s;
  q=cos_u1*cos_s-sin_u1*sin_s*cosA;
  if(q==0.0)
  {
    if(sinA>=0.0)
      dl=PI_2;
    else dl=-PI_2;
  }
  else
  {
    dl=atan(p/q);
    if(dl>=0.0)
    {
      if(sinA<0.0)
        dl-=M_PI;
    }
    else
    {
      if(sinA>=0.0)
        dl+=M_PI;
    }

  }
  L_res=L0+CountDeg*(dl-d);
  if(L_res>180.0) *L-=360.0;
  else if(L_res<=-180.0) L_res+=360.0;
  q=0.9966476672*sqrt(1.0-sin_u2*sin_u2);
  if(q==0.0)
  {
    if(sin_u2>=0.0)
      F_res=90.0;
    else F_res=-90.0;
  }
  else
    F_res=CountDeg*atan(sin_u2/q);
  if(fabs(F_res)>90.0 || fabs(L_res)>180.0)
  {
    return 1;
  }
  *F=F_res;
  *L=L_res;
  return 0;
}

//! Вычисление длины локсодромии и локсодромический пеленг.
/*! Вычисляет длину локсодромии и локсодромический пеленг между точками на эллипсоиде Красовского.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Длина локсодромии, м
\param A Локсодромический пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int KFLtoLoxodromeSA(double F,double L,double F0,double L0,double* S,double* A)
{
  double x1,y1,x2,cosA;
  if(KFLtoMXYr(F,L,F0,L0,&x1,&y1)) /* Вычисление прямоугольных координат проекции Меркатора */
  {
    *S=0.0;
    *A=0.0;
    return 1;
  }
  XYtoPolar(x1,y1,S,A);
  cosA=cos((*A)/CountDeg);
  x1=KMeridianLength(F0);
  x2=KMeridianLength(F);
  x2-=x1;
  if(fabs(cosA)<=0.00001 || fabs(x2)<=0.00001)
  {
    double sinF;
    F0=F0/CountDeg;
    sinF=sin(F0);
    *S=fabs( (K_a*cos(F0)*(L-L0)) / ( CountDeg*sqrt(1.0-K_e2*sinF*sinF) ) );

  }
  else
  {
    *S=fabs(x2/cosA);
  }
  if(*S<=0.0001)
  {
    *A=0.0;
  }
  return 0;

}

//! Вычисление координат по длине локсодромии и локсодромическому пеленгу.
/*! Вычисляет геодезические координаты эллипсоида Красовского по длине локсодромии и
локсодромическому пеленгу.
\param S Длина локсодромии, м
\param A Локсодромический пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int LoxodromeSAtoKFL(double S,double A,double F0,double L0,double* F,double* L)
{
  double A1,cosA,x1,x2,y2;
  if(S<=0.0001)
  {
    *F=F0;
    *L=L0;
    return 0;
  }
  A1=A/CountDeg;
  cosA=cos(A1);
  x1=KMeridianLength(F0);
  x2=x1+S*cosA;
  if(GXYtoKFLd(x2,0.0,F,L)) return 1;
  if(KFLtoMXYr(*F,L0,F0,L0,&x2,&y2)) return 1;
  if(fabs(x2)<=0.00001 || fabs(cosA)<=0.00001)
  {
    double sinF;
    F0=F0/CountDeg;
    sinF=sin(F0);
    y2=fabs( (CountDeg*S*sqrt(1.0-K_e2*sinF*sinF)) / (K_a*cos(F0)) );
    if(A<=180.0) *L=L0+y2;
    else *L=L0-y2;
    if(*L>180.0) *L-=360.0;
    else if(*L<=-180.0) *L+=360.0;
  }
  else
  {
    y2=x2*tan(A1);
    if(MXYtoKFLr(x2,y2,F0,L0,&x1,L)) return 1;
  }
  return 0;

}

//******************************************************************

/* Функции пересчета для эллипсоида WGS-84 */

//! Длина дуги меридиана
/*! Длина дуги меридиана эллипсоида WGS-84 между экватором и параллелью с широтой F.
\param F Широта параллели, градус
\return Длина дуги меридиана, м
*/
double WMeridianLength(double F)
{
  double sinF,sinF2;
  F=F/CountDeg;/* Перевод широты из градусов в радианы */
  sinF=sin(F);
  sinF2=sinF*sinF;
  return (6367448.989*F-sinF*cos(F)*(32010.2879+133.9638*sinF2+0.69756*sinF2*sinF2));
}

/* Проекция Гаусса-Крюгера */

//! Вспомогательная функция преобразования геодезических координат в прямоугольные координаты проекции Гаусса-Крюгера.
/*! Вспомогательная функция преобразования геодезических координат эллипсоида WGS-84
в прямоугольные координаты проекции Гаусса-Крюгера относительно произвольного осевого меридиана.
\param F Широта, градус,
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param d Разность между долготой данной точки и долготой осевого меридиана, градус
\return 0 - успех
           иначе - ошибка
*/
int WFLtoGXYd(double F, double d,double* x, double* y)
{

  double d2,sinF,cosF,sinF2,sinF4,sinF6,sinF8;
  d=d/CountDeg;
  F=F/CountDeg;
  d2=d*d;
  sinF=sin(F);
  cosF=cos(F);
  sinF2=sinF*sinF;
  sinF4=sinF2*sinF2;
  sinF6=sinF4*sinF2;
  sinF8=sinF4*sinF4;
  *x=6367448.989*F-sinF*cosF*(32010.2879+133.9638*sinF2+0.69756*sinF4-
                              d2*(3189068.5+10674.5748*sinF2+53.596*sinF4+0.299*sinF6+
                                  d2*(1344946.602-1622416.798*sinF2+10841.5475*sinF4-21.059*sinF6+
                                      d2*(556669.6523-1661728.09*sinF2+1147137.488*sinF4-33546.96*sinF6+357.736*sinF8+
                                          d2*(230959.9989-1232262.861*sinF2+1914396.89*sinF4-971225.5355*sinF6+
                                              59396.961*sinF8)))));
  *y=d*cosF*(6378137.0+21349.1496*sinF2+107.191*sinF4+0.598*sinF6+
             d2*(1070187.178-2136792.184*sinF2+17.9856*sinF4-11.89*sinF6+
                 d2*(270802.1998-1523428.018*sinF2+1327782.02*sinF4-21947.8346*sinF6+121.729*sinF6+
                     d2*(80060.1973-877625.27*sinF2+1786736.444*sinF4-1035582.498*sinF6+
                         45913.695*sinF8))));
  return 0;
}



//!  Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера.
/*! Преобразует геодезические координаты эллипсоида WGS-84 в прямоугольные координаты
проекции Гаусса-Крюгера относительно шестиградусной зоны.
\param F Широта, градус
\param L Долгота, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param n Номер шестиградусной зоны
\return 0 - успех
          иначе - ошибка
*/
int WFLtoGXY(double F, double L, double* x, double* y, int *n)
{
  if(fabs(F)>=90.0 || fabs(L)>180.0) return 1;
  if(L<0.0) L+=360.0;
  *n=(int)((L+6.0)/6.0);
  WFLtoGXYd(F,L-((*n)*6-3),x,y);/* (*n)*6-3 - долгота осевого меридиана
                                    шестиградусной зоны с номером n */
  *y+=500000.0; /* 500 000 м - смещение начала координат на запад */
  return 0;
}

//! Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера относительно реперной точки.
/*! Преобразует геодезические координаты эллипсоида WGS-84 в прямоугольные координаты проекции Гаусса-Крюгера относительно реперной точки
\param[in] F Широта, градус
\param[in] L Долгота, градус
\param[in] F0 Широта репера, градус
\param[in] L0 Долгота репера, градус
\param[out] x Плоские прямоугольные координаты,м
\param[out] y Плоские прямоугольные координаты,м
\return 0 - успех
          иначе - ошибка

\attention Исправлял комментарий Марескин О.В. Возможно он неверен, как и старый вариант Моториной:
 Вычисление пеленга и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
 Вычисляет пеленг и дальность между точками на эллипсоиде WGS-84 с помощью
прямоугольных координат проекции Гаусса-Крюгера.
*/
int WFLtoGXYr(double F,double L,double F0,double L0,double *x,double *y)
{
  double d;
  *x=0.0;
  *y=0.0;
  if(fabs(F0)>=90.0 || fabs(L0)>180.0 || fabs(F)>=90.0 || fabs(L)>180.0)
    return 1;
  d=L-L0;
  if(d>180.0) d-=360.0;
  else if(d<-180.0) d+=360.0;
  if(fabs(d)>30.0) return 1;
  WFLtoGXYd(F,d,x,y); /* Вычисление прямоугольных координат относитнльно
                                          меридиана с долготой L0 */
               /* x - координата относительно экватора */
  *x=*x-WMeridianLength(F0);
   /* Для получения координаты x относительно реперной точки из координаты x относительно
    экватора вычитается длина дуги осевого меридиана между экватором и параллелью F0 */
  return 0;

}


//! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера
относительно произвольного осевого меридиана в геодезические координаты эллипсоида WGS-84.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F Широта, градус
\param d Разность между долготой  данной точки и долготой осевого меридиана, градус
\return 0 - успех
          иначе - ошибка
*/
int GXYtoWFLd(double x,double y,double* F,double* d)
{
  double f;/* вспомогательная величина */
  double f0;/* широта точки, абсцисса
                             которой равна абсциссе x определяемой точки, а ордината равна 0 */
  double sinf,cosf,sinf2,sinf4,sinf6;
  double z,z2;
  double F_res,d_res;
  //sinf=sin(f);
  f=x/6367448.989;/* 6367448.989 м - радиус сферы, длина дуги меридиана которой
            от экватора до полюса равна длине дуги меридиана эллипсоида
            от экватора до полюса */
  sinf=sin(f);
  f0=f+cos(f)*sinf*(0.00505258-0.00002959*sinf*sinf);
  cosf=cos(f0);
  if(cosf==0.0) return 1;
  sinf=sin(f0);
  sinf2=sinf*sinf;
  sinf4=sinf2*sinf2;
  sinf6=sinf2*sinf4;
  z=y/(6378137.0*cosf);
  z2=z*z;
  F_res=CountDeg*(f0-z2*cosf*sinf*
                  (0.5033698-0.006739596*sinf2+0.000022559*sinf4-
                   z2*(0.2100125+0.037187157*sinf2-0.000543472*sinf4+0.0000079066*sinf6-
                       z2*(0.0857265556+0.07795298*sinf2-0.0003254801*sinf4-0.000014669*sinf6-
                           z2*(0.034872324+0.0760898*sinf2+0.010957915*sinf4-0.00023368*sinf6)))));
  d_res=CountDeg*z*(1.0-0.003347239*sinf2-0.000005602*sinf4-
                    z2*(0.16778993+0.16273524*sinf2-0.0005249745*sinf4-0.000008513*sinf6-
                        z2*(0.0420025+0.1487416*sinf2+0.005936*sinf4-0.00006718*sinf6-
                            z2*(0.01225+0.0947646*sinf2+0.0328447*sinf4-0.0003225*sinf6-
                                z2*(0.00387+0.052252*sinf2+0.04824*sinf4+0.003212*sinf6)))));
  if(fabs(F_res)>=90.0 || fabs(d_res)>30.0) return 1;
  *F=F_res;
  *d=d_res;
  return 0;
}



//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно
шестиградусной зоны в геодезические координаты эллипсоида WGS-84.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param n Номер шестиградусной зоны.
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int GXYtoWFL(double x,double y,int n,double* F,double* L)
{
  *F=0.0;
  *L=0.0;
  if(n<0||n>60)  return 1;
  y-=500000.0;
  if(GXYtoWFLd(x,y,F,L))/* L - долгота точки отрносительно осевого меридиана */
    return 1;
  *L+=n*6.0-3.0;/* n*6-3 - долгота осевого меридиана зоны с номером n */
  if(*L>180.0) *L-=360.0;
  else if(*L<=-180.0) *L+=360.0;
  return 0;
}




//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно реперной точки в геодезические координаты эллипсоида WGS-84.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int GXYtoWFLr(double x,double y,double F0,double L0,double *F,double *L)
{
  *F=0.0;
  *L=0.0;
  if(fabs(F0)>=90.0 || fabs(L0)>180.0) return 1;
   /* Вычисляется координата x относительно экватора. К значению координаты x относительно
   параллели F0 прибавляется длина дуги меридиана от экватора до параллекли F0 */
  x=x+WMeridianLength(F0);
  if(GXYtoWFLd(x,y,F,L))/* L - долгота точки отрносительно осевого меридиана */
    return 1;
  *L+=L0;
  if(*L>180.0) *L-=360.0;
  else if(*L<=-180.0) *L+=360.0;
  return 0;

}




/* Проекция Меркатора */


//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида WGS-84 в прямоугольные
координаты проекции Меркатора.
\param F Широта, градус
\param L Долгота, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\return 0 - успех
          иначе - ошибка
*/
int WFLtoMXY(double F,double L,double* x,double* y)
{
  double sinF;
  if (fabs(F)>=89.9 || fabs(L)>180.0)
  {
    *x=0.0;
    *y=0.0;
    return 1;
  }
  F=F/CountDeg;
  sinF=sin(F);
  *x=W_a*(log((1.0+sinF)/((1.0-sinF)))-
          W_e*log((1.0+W_e*sinF)/((1.0-W_e*sinF))))/2.0;
  *y=W_a*L/CountDeg;
  return 0;
}



//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида WGS-84 в прямоугольные
коодинаты проекции Меркатора относительно реперной точки.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\return 0 - успех
          иначе - ошибка
*/
int WFLtoMXYr(double F,double L,double F0,double L0,double* x,double* y)
{
  double sinF,sinF0;
  if (fabs(F)>=89.9 || fabs(F0)>=89.9 || fabs(L)>180.0 || fabs(L0)>180.0)
  {
    *x=0.0;
    *y=0.0;
    return 1;
  }
  F=F/CountDeg;
  F0=F0/CountDeg;
  sinF=sin(F);
  sinF0=sin(F0);
  *x=W_a*(log((1.0+sinF)*(1.0-sinF0)/((1.0-sinF)*(1.0+sinF0)))-
          W_e*log((1.0+W_e*sinF)*(1.0-W_e*sinF0)/((1.0-W_e*sinF)*(1.0+W_e*sinF0))))/2.0;
  L-=L0;
  if(L>180.0) L-=360.0;
  else if(L<=-180.0) L+=360.0;
  *y=W_a*L/CountDeg;
  return 0;

}



//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора в геодезические
координаты эллипсоида WGS-84.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int MXYtoWFL(double x, double y,double* F, double* L)
{
  double q,sinq,sin2q,sin4q,sin6q,F_res,L_res;
  q=PI_2-2.0*atan(exp(-x/W_a));
  sinq=sin(q);
  sin2q=sinq*sinq;
  sin4q=sin2q*sin2q;
  sin6q=sin4q*sin2q;
  F_res=CountDeg*(q+cos(q)*sinq*(0.006739596265-0.0000531454771*sin2q+
                              0.000000574916787*sin4q-0.000000006820852648*sin6q));
  L_res=CountDeg*y/W_a;
  if(fabs(F_res)>=90.0 || fabs(L_res)>180.0)
  {
    *F=0.0;
    *L=0.0;
    return 1;
  }
  *F=F_res;
  *L=L_res;
  return 0;

}



//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора относительно реперной
точки в геодезические координаты эллипсоида WGS-84.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int MXYtoWFLr(double x, double y,double F0,double L0,double* F, double* L)
{
  double sinF0;
  if (fabs(F0)>=89.9 || fabs(L0)>180.0)
  {
    *F=0.0;
    *L=0.0;
    return 1;
  }
  F0=F0/CountDeg;
  sinF0=sin(F0);
  x+=W_a*(log((1.0+sinF0)/(1.0-sinF0))-W_e*log((1.0+W_e*sinF0)/(1.0-W_e*sinF0)))/2.0;
  if (MXYtoWFL(x,y,F,L)) return 1;
  *L+=L0;
  if (*L>180.0) *L-=360.0;
  else if (*L<=-180.0) *L+=360.0;
  return 0;

}


/* Вычисление расстояний и направлений на эллипсоиде WGS-84 */


//! Вычисление пеленга и дальности.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде WGS-84.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Дальность, м
\param A Пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int WFLtoEllipseSA(double F,double L,double F0,double L0,double* S,double* A)
{
  if(fabs(F-F0)>3.0 || fabs(L-L0)>3.0 || fabs(F0)>=85.0 || fabs(F)>=85.0)
    return WFLtoSA_Bessel(F,L,F0,L0,S,A);
  return WFLtoSA_GaussKruger(F,L,F0,L0,S,A);
}



//! Вычисление координат по пеленгу и дальности
/*! Вычисляет геодезические координаты эллипсоида WGS-84 по пеленгу и дальности.
\param S Дальность, м
\param A Пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int EllipseSAtoWFL(double S,double A,double F0,double L0,double *F,double *L)
{
  if(S>300000.0)
    return SAtoWFL_Bessel(S,A,F0,L0,F,L);
  return SAtoWFL_GaussKruger(S,A,F0,L0,F,L);
}



//! Вычисление пеленга и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде WGS-84 с помощью
прямоугольных координат проекции Гаусса-Крюгера.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Дальность, м
\param A Пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int WFLtoSA_GaussKruger(double F,double L,double F0,double L0,double* S,double* A)
{
  double x,y,P_S,P_A;
  if(WFLtoGXYr(F,L,F0,L0,&x,&y)) /* Вычисление прямоугольных координат проекции Гаусса-Крюгера */
  {
    *S=0.0;
    *A=0.0;
    return 1;
  }
  XYtoPolar(x,y,S,A);
  /* Вычисление редукций расстояния и напрвления */
  WPopravka((F+F0)/2.0,x,y,&P_S,&P_A);
  *S=(*S)*P_S;
  *A+=P_A;
  if(*S<=0.0001)
  {
    *A=0.0;
  }
  return 0;
}



//! Вычисление координат по пеленгу и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет геодезические координаты эллипсоида WGS-84 по пеленгу и дальности с
помощью прямоугольных координат проекции Гаусса-Крюгера.
\param S Дальность, м
\param A Пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int SAtoWFL_GaussKruger(double S,double A,double F0,double L0,double *F,double *L)
{
  double x,y,P_S,P_A;
  *F=0.0;
  *L=0.0;
  if(S<=0.0001)
  {
    *F=F0;
    *L=L0;
    return 0;
  }
  if(PolartoXY(S,A,&x,&y))  return 1;
  if(GXYtoWFLr(x,y,F0,L0,F,L)) return 1;
     /* Вычисление редукция расстояния и направления */
  WPopravka((*F+F0)/2.0,x,y,&P_S,&P_A);
  S=S/P_S;
  A-=P_A;
  PolartoXY(S,A,&x,&y);
  return GXYtoWFLr(x,y,F0,L0,F,L);
}



//! Вычисление поправок для определения пеленга и дальности на эллипсоиде Красовского при использовании прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет поправки для определения пеленга и дальности на эллипсоиде WGS-84
при использовании координат проекции Гаусса-Крюгера.
\param F_mid Средняя широта точек, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param P_S Поправка для вычисления расстояния, м
\param P_A Поправка для вычисления азимута, градус
\return 0 - успех
          иначе - ошибка
*/
int WPopravka(double F_mid,double x,double y,double* P_S,double* P_A)
{
  double sinFm,v,Rm_1,w;
  F_mid=F_mid/CountDeg;
  sinFm=sin(F_mid);
  sinFm=sinFm*sinFm;
  v=1.0-W_e2*sinFm;
  Rm_1=v*v/40408295989504.0;
  w=y*y*Rm_1;
  *P_S=1.0-w/6.0*(1.0-w/4.0);
  *P_A=CountDeg*(x*y*Rm_1/6.0*(1.0-y*Rm_1/8.0)+(w*y*v*sin(2.0*F_mid))/7545558205.5297);
  return 0;
}


//! Вычисление пеленга и дальности с помощью способа Бесселя.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде WGS-84 с помощью
способа Бесселя.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Дальность, м
\param A Пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int WFLtoSA_Bessel(double F,double L,double F0,double L0,double* S,double* A)
{
  double sinF1,sinF2,w1,w2,sin_u1,sin_u2,cos_u1,cos_u2,
    a1,a2,b1,b2,dl,d,d0,v,p,q,A1,sinA0,cos2A0,sinA1,cos_v,s1,cos_s,sin_s,x,y,alf,bet,A_,B_,C_;
  if(fabs(F0)>90.0 || fabs(F)>90.0 || fabs(L0)>180.0 || fabs(L)>180.0)
  {
    *S=0.0;
    *A=0.0;
    return 1;
  }
  F0=F0/CountDeg;
  F=F/CountDeg;
  sinF1=sin(F0);
  sinF2=sin(F);
  w1=sqrt(1.0-W_e2*sinF1*sinF1);
  w2=sqrt(1.0-W_e2*sinF2*sinF2);
  sin_u1=(0.9966471401*sinF1)/w1;
  sin_u2=(0.9966471401*sinF2)/w2;
  cos_u1=cos(F0)/w1;
  cos_u2=cos(F)/w2;
  a1=sin_u1*sin_u2;
  a2=cos_u1*cos_u2;
  b1=cos_u1*sin_u2;
  b2=sin_u1*cos_u2;
  dl=(L-L0)/CountDeg;
  if(dl>M_PI) dl-=PI2;
  else if(dl<-M_PI) dl+=PI2;
  d=0.0;
  d0=1.0;
  while(fabs(d-d0)>=0.0000001)
  {
    d0=d;
    v=dl+d0;
    cos_v=cos(v);
    p=cos_u2*sin(v);
    q=b1-b2*cos_v;
    if(q==0.0)
    {
      if(fabs(L-L0)==180.0)
      {
        if(L>=L0)
          A1=PI_2;
        else
          A1=PI3_2;
      }
      else
      {
        if(p>=0.0)
          A1=PI_2;
        else
          A1=PI3_2;
      }
    }
    else
    {
      A1=atan(p/q);
      if(q<0.0)
      {
        A1=M_PI+A1;
      }
      else if(p<0.0)
        A1=PI2+A1;
    }
    sinA1=sin(A1);
    cos_s=a1+a2*cos_v;
    sin_s=p*sinA1+q*cos(A1);
    if(cos_s==0.0)
      s1=PI_2;
    else
    {
      s1=fabs(atan(sin_s/cos_s));
      if(cos_s<0.0) s1=M_PI-s1;
    }
    sin_s=sin(s1);
    cos_s=cos(s1);
    sinA0=cos_u1*sinA1;
    cos2A0=(1.0-sinA0*sinA0);
    x=2.0*a1-cos2A0*cos_s;
    alf=0.003352859855-(0.00000281975-0.000000007*cos2A0)*cos2A0;
    bet=(0.00000281975-0.0000000093756*cos2A0)*cos2A0;
    d=(alf*s1-bet*x*sin_s)*sinA0;

  }
  y=(cos2A0*cos2A0-2.0*x*x)*cos_s;
  A_=6356752.0+(10710.4855-13.534*cos2A0)*cos2A0;
  B_=10710.4855-18.046*cos2A0;
  C_=4.511;
  *A=CountDeg*A1;
  *S=A_*s1+(B_*x+C_*y)*sin_s;
  if(*S<=0.0001)
  {
    *A=0.0;
  }
  return 0;

}


//! Вычисление координат по пеленгу и дальности с помощью способа Бесселя.
/*! Вычисляет геодезические координаты эллипсоида WGS-84 по пеленгу и дальности
с помощью способа Бесселя.
\param S Дальность, м
\param A Пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int SAtoWFL_Bessel(double S,double A,double F0,double L0,double* F,double* L)
{
  double sinF1,w1,sin_u1,sin_u2,cos_u1,sinA0,cos2A0,sinA,cosA,ctg_s1,ctg2_s1,sin_2s1,cos_2s1,
    A_,B_,C_,alf,bet,s0,s,sin_s,cos_s,sin_2s0,cos_2s0,sin_2s,cos_2s,d,dl,p,q,F_res,L_res;
  if(S<=0.0001)
  {
    *F=F0;
    *L=L0;
    return 0;
  }
  *F=0.0;
  *L=0.0;
  if(fabs(F0)>90.0 || fabs(L0)>90.0) return 1;
  F0=F0/CountDeg;
  A=A/CountDeg;
  sinF1=sin(F0);
  sinA=sin(A);
  cosA=cos(A);
  w1=sqrt(1.0-W_e2*sinF1*sinF1);
  sin_u1=(0.9966471401*sinF1)/w1;
  cos_u1=cos(F0)/w1;
  sinA0=cos_u1*sin(A);
  cos2A0=1.0-sinA0*sinA0;
  A_=6356752.0+(10710.4855-13.534*cos2A0)*cos2A0;
  B_=(5355.2427-9.023*cos2A0)*cos2A0;
  C_=2.255*cos2A0*cos2A0;
  alf=0.003352859855-(0.00000281975-0.000000007*cos2A0)*cos2A0;
  bet=(0.00000140943-0.00000000468559*cos2A0)*cos2A0;
  if(sin_u1==0.0)
  {
    sin_2s1=0.0;
    cos_2s1=1.0;
  }
  else
  {
    ctg_s1=(cos_u1*cosA)/sin_u1;
    ctg2_s1=ctg_s1*ctg_s1;
    sin_2s1=(2.0*ctg_s1)/(ctg2_s1+1.0);
    cos_2s1=(ctg2_s1-1.0)/(ctg2_s1+1.0);
  }
  s0=(S-(B_+C_*cos_2s1)*sin_2s1)/A_;
  sin_2s0=sin(2.0*s0);
  cos_2s0=cos(2.0*s0);
  sin_2s=sin_2s0*cos_2s1+cos_2s0*sin_2s1;
  cos_2s=cos_2s0*cos_2s1-sin_2s0*sin_2s1;
  s=s0+((B_+5.0*C_*cos_2s)*sin_2s)/A_;
  sin_s=sin(s);
  cos_s=cos(s);
  d=(alf*s+bet*(sin_2s-sin_2s1))*sinA0;
  sin_u2=sin_u1*cos_s+cos_u1*sin_s*cosA;
  p=sinA*sin_s;
  q=cos_u1*cos_s-sin_u1*sin_s*cosA;
  if(q==0.0)
  {
    if(sinA>=0.0)
      dl=PI_2;
    else dl=-PI_2;
  }
  else
  {
    dl=atan(p/q);
    if(dl>=0.0)
    {
      if(sinA<0.0)
        dl-=M_PI;
    }
    else
    {
      if(sinA>=0.0)
        dl+=M_PI;
    }

  }
  L_res=L0+CountDeg*(dl-d);
  if(L_res>180.0) L_res-=360.0;
  else if(L_res<=-180.0) L_res=360.0;
  q=0.9966471401*sqrt(1.0-sin_u2*sin_u2);
  if(q==0.0)
  {
    if(sin_u2>=0.0)
      F_res=90.0;
    else F_res=-90.0;
  }
  else
    F_res=CountDeg*atan(sin_u2/q);
  if(fabs(F_res)>90.0 || fabs(L_res)>180.0) return 1;
  *F=F_res;
  *L=L_res;
  return 0;
}


//! Вычисление длины локсодромии и локсодромический пеленг.
/*! Вычисляет длину локсодромии и локсодромический пеленг между точками на эллипсоиде WGS-84.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Длина локсодромии, м
\param A Локсодромический пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int WFLtoLoxodromeSA(double F,double L,double F0,double L0,double* S,double* A)
{
  double x1,y1,x2,cosA;
  if(WFLtoMXYr(F,L,F0,L0,&x1,&y1)) /* Вычисление прямоугольных координат проекции Меркатора */
  {
    *S=0.0;
    *A=0.0;
    return 1;
  }
  XYtoPolar(x1,y1,S,A);
  cosA=cos((*A)/CountDeg);
  x1=WMeridianLength(F0);
  x2=WMeridianLength(F);
  x2-=x1;
  if(fabs(cosA)<=0.00001 || fabs(x2)<=0.00001)
  {
    double sinF;
    F0=F0/CountDeg;
    sinF=sin(F0);
    *S=fabs( (W_a*cos(F0)*(L-L0)) / ( CountDeg*sqrt(1.0-W_e2*sinF*sinF) ) );

  }
  else
  {
    *S=fabs(x2/cosA);
  }
  if(*S<=0.0001)
  {
    *A=0.0;
  }
  return 0;

}

//! Вычисление координат по длине локсодромии и локсодромическому пеленгу.
/*! Вычисляет геодезические координаты эллипсоида WGS-84 по длине локсодромии и
локсодромическому пеленгу.
\param S Длина локсодромии, м
\param A Локсодромический пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int LoxodromeSAtoWFL(double S,double A,double F0,double L0,double* F,double* L)
{
  double A1,cosA,x1,x2,y2;
  if(S<=0.0001)
  {
    *F=F0;
    *L=L0;
    return 0;
  }
  A1=A/CountDeg;
  cosA=cos(A1);
  x1=WMeridianLength(F0);
  x2=x1+S*cosA;
  if(GXYtoWFLd(x2,0.0,F,L)) return 1;
  if(WFLtoMXYr(*F,L0,F0,L0,&x2,&y2)) return 1;
  if(fabs(x2)<=0.00001 || fabs(cosA)<=0.00001)
  {
    double sinF;
    F0=F0/CountDeg;
    sinF=sin(F0);
    y2=fabs( (CountDeg*S*sqrt(1.0-W_e2*sinF*sinF)) / (W_a*cos(F0)) );
    if(A<=180.0) *L=L0+y2;
    else *L=L0-y2;
    if(*L>180.0) *L-=360.0;
    else if(*L<=-180.0) *L+=360.0;
  }
  else
  {
    y2=x2*tan(A1);
    if(MXYtoWFLr(x2,y2,F0,L0,&x1,L)) return 1;
  }
  return 0;

}


//******************************************************************

/* Функции пересчета для эллипсоида ПЗ-90 */

//! Длина дуги меридиана
/*! Длина дуги меридиана эллипсоида ПЗ-90 между экватором и параллелью с широтой F.
\param F Широта параллели, градус
\return Длина дуги меридиана, м
*/
double PZ90MeridianLength(double F)
{
  double sinF,sinF2;
  F=F/CountDeg;/* Перевод широты из градусов в радианы */
  sinF=sin(F);
  sinF2=sinF*sinF;
  return (6367447.989*F-sinF*cos(F)*(32010.28785+133.9638*sinF2+0.69755*sinF2*sinF2));
}

/* Проекция Гаусса-Крюгера */


//! Вспомогательная функция преобразования геодезических координат в прямоугольные координаты проекции Гаусса-Крюгера.
/*! Вспомогательная функция преобразования геодезических координат эллипсоида ПЗ-90
в прямоугольные координаты проекции Гаусса-Крюгера относительно произвольного осевого меридиана.
\param F Широта, градус,
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param d Разность между долготой данной точки и долготой осевого меридиана, градус
\return 0 - успех
           иначе - ошибка
*/
int PZ90FLtoGXYd(double F, double d,double* x, double* y)
{

  double d2,sinF,cosF,sinF2,sinF4,sinF6,sinF8;
  d=d/CountDeg;
  F=F/CountDeg;
  d2=d*d;
  sinF=sin(F);
  cosF=cos(F);
  sinF2=sinF*sinF;
  sinF4=sinF2*sinF2;
  sinF6=sinF4*sinF2;
  sinF8=sinF4*sinF4;
  *x=6367447.989*F-sinF*cosF*(32010.28785+133.9638*sinF2+0.69755*sinF4-
                              d2*(3189068.0+10674.57477*sinF2+53.595539*sinF4+0.298995*sinF6+
                                  d2*(1344946.394-1622416.548*sinF2+10841.5475*sinF4-21.059*sinF6+
                                      d2*(556669.5676-1661727.84*sinF2+1147137.322*sinF4-33546.961*sinF6+357.736*sinF8+
                                          d2*(230959.9646-1232262.682*sinF2+1914396.62*sinF4-971225.4121*sinF6+
                                              59396.96197*sinF8)))));
  *y=d*cosF*(6378136.0+21349.14954*sinF2+107.191*sinF4+0.59799*sinF6+
             d2*(1070187.011-2136791.85*sinF2+17.9855839*sinF4-11.89*sinF6+
                 d2*(270802.1582-1523427.785*sinF2+1327781.82*sinF4-21947.83472*sinF6+121.7289*sinF6+
                     d2*(80060.18519-877625.1389*sinF2+1786736.183*sinF4-1035582.356*sinF6+
                         45913.69577*sinF8))));
  return 0;
}



//!  Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера.
/*! Преобразует геодезические координаты эллипсоида ПЗ-90 в прямоугольные координаты
проекции Гаусса-Крюгера относительно шестиградусной зоны.
\param F Широта, градус
\param L Долгота, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param n Номер шестиградусной зоны
\return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoGXY(double F, double L, double* x, double* y, int *n)
{
  *x=0.0;
  *y=0.0;
  *n=0;
  if(fabs(F)>=90.0 || fabs(L)>180.0) return 1;
  if(L<0.0) L+=360.0;
  *n=(int)((L+6.0)/6.0);
  PZ90FLtoGXYd(F,L-((*n)*6-3),x,y);/* (*n)*6-3 - долгота осевого меридиана
                                    шестиградусной зоны с номером n */
  *y+=500000.0; /* 500 000 м - смещение начала координат на запад */
  return 0;
}



//! Функция преобразования геодезических координат в прямоугольные коодинаты проекции Гаусса-Крюгера относительно реперной точки.
/*! Преобразует геодезические координаты эллипсоида ПЗ-90 в прямоугольные координаты проекции Гаусса-Крюгера относительно реперной точки
\param[in] F Широта, градус
\param[in] L Долгота, градус
\param[in] F0 Широта репера, градус
\param[in] L0 Долгота репера, градус
\param[out] x Плоские прямоугольные координаты,м
\param[out] y Плоские прямоугольные координаты,м
\return 0 - успех
          иначе - ошибка

\attention Исправлял комментарий Марескин О.В. Возможно он неверен, как и старый вариант Моториной:
 Вычисление пеленга и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
 Вычисляет пеленг и дальность между точками на эллипсоиде ПЗ-90 с помощью
прямоугольных координат проекции Гаусса-Крюгера.
*/
int PZ90FLtoGXYr(double F,double L,double F0,double L0,double *x,double *y)
{
  double d;
  *x=0.0;
  *y=0.0;
  if(fabs(F)>=90.0 || fabs(L)>180.0 || fabs(F0)>=90.0 || fabs(L0)>180.0) return 1;
  d=L-L0;
  if(d>180.0) d-=360.0;
  else if(d<-180.0) d+=360.0;
  if(fabs(d)>30.0) return 1;
  PZ90FLtoGXYd(F,d,x,y); /* Вычисление прямоугольных координат относитнльно
                                          меридиана с долготой L0 */
               /* x - координата относительно экватора */

  *x=*x-PZ90MeridianLength(F0);
   /* Для получения координаты x относительно реперной точки из координаты x относительно
    экватора вычитается длина дуги осевого меридиана между экватором и параллелью F0 */
  return 0;

}


//! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Вспомогательная функция преобразования прямоугольных координат проекции Гаусса-Крюгера
относительно произвольного осевого меридиана в геодезические координаты эллипсоида ПЗ-90.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F Широта, градус
\param d Разность между долготой  данной точки и долготой осевого меридиана, градус
\return 0 - успех
          иначе - ошибка
*/
int GXYtoPZ90FLd(double x,double y,double* F,double* d)
{
  double f;/* вспомогательная величина */
  double f0;/* широта точки, абсцисса
                             которой равна абсциссе x определяемой точки, а ордината равна 0 */
  double sinf,cosf,sinf2,sinf4,sinf6;
  double z,z2;
  double F_res,d_res;
//  sinf=sin(f);
  f=x/6367447.9888;/* 6367447.9888 м - радиус сферы, длина дуги меридиана которой
            от экватора до полюса равна длине дуги меридиана эллипсоида
            от экватора до полюса */
  sinf=sin(f);
  f0=f+cos(f)*sinf*(0.00505258-0.0000295914*sinf*sinf);
  cosf=cos(f0);
  if(cosf==0.0) return 1;
  sinf=sin(f0);
  sinf2=sinf*sinf;
  sinf4=sinf2*sinf2;
  sinf6=sinf2*sinf4;
  z=y/(6378136.0*cosf);
  z2=z*z;
  F_res=CountDeg*(f0-z2*cosf*sinf*
                  (0.5033698-0.0067395973*sinf2+0.000022559047*sinf4-
                   z2*(0.2100125+0.037187156*sinf2-0.0005434725*sinf4+0.0000079066*sinf6-
                       z2*(0.08572655577+0.07795298*sinf2-0.0003254804*sinf4-0.00001466919*sinf6-
                           z2*(0.034872324+0.076089797*sinf2+0.010957914*sinf4-0.00023368448*sinf6)))));
  d_res=CountDeg*z*(1.0-0.0033472396*sinf2-0.000005602*sinf4-
                    z2*(0.16778993+0.16273523*sinf2-0.00052497466*sinf4-0.000008513*sinf6-
                        z2*(0.0420025+0.14874157*sinf2+0.00593635*sinf4-0.00006718*sinf6-
                            z2*(0.01224665+0.09476465*sinf2+0.032844757*sinf4-0.0003225*sinf6-
                                z2*(0.0038747+0.052525*sinf2+0.0482456*sinf4+0.003212*sinf6)))));
  if(fabs(F_res)>90.0 || fabs(d_res)>30.0) return 1;
  *F=F_res;
  *d=d_res;
  return 0;
}



//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно
шестиградусной зоны в геодезические координаты эллипсоида ПЗ-90.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param n Номер шестиградусной зоны.
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int GXYtoPZ90FL(double x,double y,int n,double* F,double* L)
{
  *F=0.0;
  *L=0.0;
  if(n<0||n>60)  return 1;
  y-=500000.0;
  if(GXYtoPZ90FLd(x,y,F,L))/* L - долгота точки отрносительно осевого меридиана */
    return 1;
  *L+=n*6.0-3.0;/* n*6-3 - долгота осевого меридиана зоны с номером n */
  if(*L>180.0) *L-=360.0;
  else if(*L<=-180.0) *L+=360.0;
  return 0;
}




//! Преобразование координат проекции Гаусса-Крюгера в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Гаусса-Крюгера относительно реперной точки в геодезические координаты эллипсоида ПЗ-90.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int GXYtoPZ90FLr(double x,double y,double F0,double L0,double *F,double *L)
{
  *F=0.0;
  *L=0.0;
  if(fabs(F0)>=90.0 || fabs(L0)>180.0) return 1;
   /* Вычисляется координата x относительно экватора. К значению координаты x относительно
   параллели F0 прибавляется длина дуги меридиана от экватора до параллекли F0 */
  x=x+PZ90MeridianLength(F0);
  if(GXYtoPZ90FLd(x,y,F,L))/* L - долгота точки отрносительно осевого меридиана */
    return 1;
  *L+=L0;
  if(*L>180.0) *L-=360.0;
  else if(*L<=-180.0) *L+=360.0;
  return 0;


}


/* Проекция Меркатора */


//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида ПЗ-90 в прямоугольные
координаты проекции Меркатора.
\param F Широта, градус
\param L Долгота, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoMXY(double F,double L,double* x,double* y)
{
  double sinF;
  if (fabs(F)>=89.9 || fabs(L)>180.0)
  {
    *x=0.0;
    *y=0.0;
    return 1;
  }
  F=F/CountDeg;
  sinF=sin(F);
  *x=PZ90_a*(log((1.0+sinF)/((1.0-sinF)))-
             PZ90_e*log((1.0+PZ90_e*sinF)/((1.0-PZ90_e*sinF))))/2.0;
  *y=PZ90_a*L/CountDeg;
  return 0;
}


//! Функция преобразования геодезических координат в прямоугольные координаты проекции Меркатора.
/*! Преобразует геодезические координаты эллипсоида ПЗ-90 в прямоугольные
коодинаты проекции Меркатора относительно реперной точки.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoMXYr(double F,double L,double F0,double L0,double* x,double* y)
{
  double sinF,sinF0;
  if (fabs(F)>=89.9 || fabs(F0)>=89.0 || fabs(L)>180.0 || fabs(L0)>180.0)
  {
    *x=0.0;
    *y=0.0;
    return 1;
  }
  F=F/CountDeg;
  F0=F0/CountDeg;
  sinF=sin(F);
  sinF0=sin(F0);
  *x=PZ90_a*(log((1.0+sinF)*(1.0-sinF0)/((1.0-sinF)*(1.0+sinF0)))-
             PZ90_e*log((1.0+PZ90_e*sinF)*(1.0-PZ90_e*sinF0)/((1.0-PZ90_e*sinF)*(1.0+PZ90_e*sinF0))))/2.0;
  L-=L0;
  if(L>180.0) L=-360.0;
  else if(L<=-180.0) L+=360.0;
  *y=PZ90_a*L/CountDeg;
  return 0;

}



//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора в геодезические
координаты эллипсоида ПЗ-90.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int MXYtoPZ90FL(double x, double y,double* F, double* L)
{
  double q,sinq,sin2q,sin4q,sin6q,F_res,L_res;
  q=PI_2-2.0*atan(exp(-x/PZ90_a));
  sinq=sin(q);
  sin2q=sinq*sinq;
  sin4q=sin2q*sin2q;
  sin6q=sin4q*sin2q;
  F_res=CountDeg*(q+cos(q)*sinq*(0.006739596265-0.0000531454771*sin2q+
                              0.000000574916787*sin4q-0.000000006820852648*sin6q));
  L_res=CountDeg*y/PZ90_a;
  if(fabs(F_res)>=90.0 || fabs(L_res)>180.0)
  {
    *F=0.0;
    *L=0.0;
    return 1;
  }
  *F=F_res;
  *L=L_res;
  return 0;

}



//! Преобразование координат проекции Мекатора в геодезические координаты.
/*! Преобразует прямоугольные координаты проекции Меркатора относительно реперной
точки в геодезические координаты эллипсоида ПЗ-90.
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int MXYtoPZ90FLr(double x, double y,double F0,double L0,double* F, double* L)
{
  double sinF0;
  if (fabs(F0)>=89.9 || fabs(L0)>180.0)
  {
    *F=0.0;
    *L=0.0;
    return 1;
  }
  F0=F0/CountDeg;
  sinF0=sin(F0);
  x+=PZ90_a*(log((1.0+sinF0)/(1.0-sinF0))-PZ90_e*log((1.0+PZ90_e*sinF0)/(1.0-PZ90_e*sinF0)))/2.0;
  if (MXYtoPZ90FL(x,y,F,L)) return 1;
  *L+=L0;
  if (*L>180.0) *L-=360.0;
  else if (*L<=-180.0) *L+=360.0;
  return 0;

}


/* Вычисление расстояний и направлений на эллипсоиде ПЗ-90 */

//! Вычисление пеленга и дальности.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде ПЗ-90.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Дальность, м
\param A Пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoEllipseSA(double F,double L,double F0,double L0,double* S,double* A)
{
  if(fabs(F-F0)>3.0 || fabs(L-L0)>3.0 || fabs(F)>=85.0 || fabs(F0)>=85.0)
    return PZ90FLtoSA_Bessel(F,L,F0,L0,S,A);
  return PZ90FLtoSA_GaussKruger(F,L,F0,L0,S,A);
}



//! Вычисление координат по пеленгу и дальности
/*! Вычисляет геодезические координаты эллипсоида ПЗ-90 по пеленгу и дальности.
\param S Дальность, м
\param A Пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int EllipseSAtoPZ90FL(double S,double A,double F0,double L0,double *F,double *L)
{
  if(S>300000.0)
    return SAtoPZ90FL_Bessel(S,A,F0,L0,F,L);
  return SAtoPZ90FL_GaussKruger(S,A,F0,L0,F,L);
}



//! Вычисление пеленга и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде ПЗ-90 с помощью
прямоугольных координат проекции Гаусса-Крюгера.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Дальность, м
\param A Пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoSA_GaussKruger(double F,double L,double F0,double L0,double* S,double* A)
{
  double x,y,P_S,P_A;
  if(PZ90FLtoGXYr(F,L,F0,L0,&x,&y)) /* Вычисление прямоугольных координат проекции Гаусса-Крюгера */
  {
    *S=0.0;
    *A=0.0;
    return 1;
  }
  XYtoPolar(x,y,S,A);
  /* Вычисление редукций расстояния и напрвления */
  PZ90Popravka((F+F0)/2.0,x,y,&P_S,&P_A);
  *S=(*S)*P_S;
  *A+=P_A;
  if(*S<=0.0001)
  {
    *A=0.0;
  }
  return 0;
}



//! Вычисление координат по пеленгу и дальности с помощью прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет геодезические координаты эллипсоида ПЗ-90 по пеленгу и дальности с
помощью прямоугольных координат проекции Гаусса-Крюгера.
\param S Дальность, м
\param A Пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int SAtoPZ90FL_GaussKruger(double S,double A,double F0,double L0,double *F,double *L)
{
  double x,y,P_S,P_A;
  *F=0.0;
  *L=0.0;
  if(S<=0.0001)
  {
    *F=F0;
    *L=L0;
    return 0;
  }
  if(PolartoXY(S,A,&x,&y))  return 1;
  if(GXYtoPZ90FLr(x,y,F0,L0,F,L)) return 1;
     /* Вычисление редукция расстояния и направления */
  PZ90Popravka((*F+F0)/2.0,x,y,&P_S,&P_A);
  S=S/P_S;
  A-=P_A;
  PolartoXY(S,A,&x,&y);
  return GXYtoPZ90FLr(x,y,F0,L0,F,L);
}



//! Вычисление поправок для определения пеленга и дальности на эллипсоиде ПЗ-90 при использовании прямоугольных координат проекции Гаусса-Крюгера.
/*! Вычисляет поправки для определения пеленга и дальности на эллипсоиде Красовского
при использовании координат проекции Гаусса-Крюгера.
\param F_mid Средняя широта точек, градус
\param x Плоские прямоугольные координаты,м
\param y Плоские прямоугольные координаты,м
\param P_S Поправка для вычисления расстояния, м
\param P_A Поправка для вычисления азимута, градус
\return 0 - успех
          иначе - ошибка
*/
int PZ90Popravka(double F_mid,double x,double y,double* P_S,double* P_A)
{
  double sinFm,v,Rm_1,w;
  F_mid=F_mid/CountDeg;
  sinFm=sin(F_mid);
  sinFm=sinFm*sinFm;
  v=1.0-PZ90_e2*sinFm;
  Rm_1=v*v/40408283276001.0;
  w=y*y*Rm_1;
  *P_S=1.0-w/6.0*(1.0-w/4.0);
  *P_A=CountDeg*(x*y*Rm_1/6.0*(1.0-y*Rm_1/8.0)+(w*y*v*  sin(2.0*F_mid))/7545555829.5071);
  return 0;
}


//! Вычисление пеленга и дальности с помощью способа Бесселя.
/*! Вычисляет пеленг и дальность между точками на эллипсоиде ПЗ-90 с помощью
способа Бесселя.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Дальность, м
\param A Пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoSA_Bessel(double F,double L,double F0,double L0,double* S,double* A)
{
  double sinF1,sinF2,w1,w2,sin_u1,sin_u2,cos_u1,cos_u2,
    a1,a2,b1,b2,dl,d,d0,v,p,q,A1,sinA0,cos2A0,sinA1,cos_v,s1,cos_s,sin_s,x,y,alf,bet,A_,B_,C_;
  if(fabs(F)>90.0 || fabs(F0)>90.0 || fabs(L)>180.0 || fabs(L0)>180.0)
  {
    *S=0.0;
    *A=0.0;
    return 1;
  }
  F0=F0/CountDeg;
  F=F/CountDeg;
  sinF1=sin(F0);
  sinF2=sin(F);
  w1=sqrt(1.0-PZ90_e2*sinF1*sinF1);
  w2=sqrt(1.0-PZ90_e2*sinF2*sinF2);
  sin_u1=(0.9966471395*sinF1)/w1;
  sin_u2=(0.9966471395*sinF2)/w2;
  cos_u1=cos(F0)/w1;
  cos_u2=cos(F)/w2;
  a1=sin_u1*sin_u2;
  a2=cos_u1*cos_u2;
  b1=cos_u1*sin_u2;
  b2=sin_u1*cos_u2;
  dl=(L-L0)/CountDeg;
  if(dl>M_PI) dl-=PI2;
  else if(dl<-M_PI) dl+=PI2;
  d=0.0;
  d0=1.0;
  while(fabs(d-d0)>=0.0000001)
  {
    d0=d;
    v=dl+d0;
    cos_v=cos(v);
    p=cos_u2*sin(v);
    q=b1-b2*cos_v;
    if(q==0.0)
    {
      if(fabs(L-L0)==180.0)
      {
        if(L>=L0)
          A1=PI_2;
        else
          A1=PI3_2;
      }
      else
      {
        if(p>=0.0)
          A1=PI_2;
        else
          A1=PI3_2;
      }
    }
    else
    {
      A1=atan(p/q);
      if(q<0.0)
      {
        A1=M_PI+A1;
      }
      else if(p<0.0)
        A1=PI2+A1;
    }
    sinA1=sin(A1);
    cos_s=a1+a2*cos_v;
    sin_s=p*sinA1+q*cos(A1);
    if(cos_s==0.0)
      s1=PI_2;
    else
    {
      s1=fabs(atan(sin_s/cos_s));
      if(cos_s<0.0) s1=M_PI-s1;
    }
    sin_s=sin(s1);
    cos_s=cos(s1);
    sinA0=cos_u1*sinA1;
    cos2A0=(1.0-sinA0*sinA0);
    x=2.0*a1-cos2A0*cos_s;
    alf=0.00335286038-(0.00000281975-0.000000007*cos2A0)*cos2A0;
    bet=(0.00000281975-0.0000000093756*cos2A0)*cos2A0;
    d=(alf*s1-bet*x*sin_s)*sinA0;

  }
  y=(cos2A0*cos2A0-2.0*x*x)*cos_s;
  A_=6356751.0+(10710.4855-13.534*cos2A0)*cos2A0;
  B_=10710.4855-18.046*cos2A0;
  C_=4.511;
  *A=CountDeg*A1;
  *S=A_*s1+(B_*x+C_*y)*sin_s;
  if(*S<=0.0001)
  {
    *A=0.0;
  }
  return 0;

}

//! Вычисление координат по пеленгу и дальности с помощью способа Бесселя.
/*! Вычисляет геодезические координаты эллипсоида ПЗ-90 по пеленгу и дальности
с помощью способа Бесселя.
\param S Дальность, м
\param A Пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int SAtoPZ90FL_Bessel(double S,double A,double F0,double L0,double* F,double* L)
{
  double sinF1,w1,sin_u1,sin_u2,cos_u1,sinA0,cos2A0,sinA,cosA,ctg_s1,ctg2_s1,sin_2s1,cos_2s1,
    A_,B_,C_,alf,bet,s0,s,sin_s,cos_s,sin_2s0,cos_2s0,sin_2s,cos_2s,d,dl,p,q,F_res,L_res;
  if(S<=0.0001)
  {
    *F=F0;
    *L=L0;
    return 0;
  }
  *F=0.0;
  *L=0.0;
  if(fabs(F0)>90.0 || fabs(L0)>180.0) return 1;
  F0=F0/CountDeg;
  A=A/CountDeg;
  sinF1=sin(F0);
  sinA=sin(A);
  cosA=cos(A);
  w1=sqrt(1.0-PZ90_e2*sinF1*sinF1);
  sin_u1=(0.9966471395*sinF1)/w1;
  cos_u1=cos(F0)/w1;
  sinA0=cos_u1*sin(A);
  cos2A0=1.0-sinA0*sinA0;
  A_=6356751.0+(10710.4855-13.534*cos2A0)*cos2A0;
  B_=(5355.2427-9.023*cos2A0)*cos2A0;
  C_=2.25576*cos2A0*cos2A0;
  alf=0.00335286038-(0.00000281975-0.000000007*cos2A0)*cos2A0;
  bet=(0.000001409877-0.0000000046878*cos2A0)*cos2A0;
  if(sin_u1==0.0)
  {
    sin_2s1=0.0;
    cos_2s1=1.0;
  }
  else
  {
    ctg_s1=(cos_u1*cosA)/sin_u1;
    ctg2_s1=ctg_s1*ctg_s1;
    sin_2s1=(2.0*ctg_s1)/(ctg2_s1+1.0);
    cos_2s1=(ctg2_s1-1.0)/(ctg2_s1+1.0);
  }
  s0=(S-(B_+C_*cos_2s1)*sin_2s1)/A_;
  sin_2s0=sin(2.0*s0);
  cos_2s0=cos(2.0*s0);
  sin_2s=sin_2s0*cos_2s1+cos_2s0*sin_2s1;
  cos_2s=cos_2s0*cos_2s1-sin_2s0*sin_2s1;
  s=s0+((B_+5.0*C_*cos_2s)*sin_2s)/A_;
  sin_s=sin(s);
  cos_s=cos(s);
  d=(alf*s+bet*(sin_2s-sin_2s1))*sinA0;
  sin_u2=sin_u1*cos_s+cos_u1*sin_s*cosA;
  p=sinA*sin_s;
  q=cos_u1*cos_s-sin_u1*sin_s*cosA;
  if(q==0.0)
  {
    if(sinA>=0.0)
      dl=PI_2;
    else dl=-PI_2;
  }
  else
  {
    dl=atan(p/q);
    if(dl>=0.0)
    {
      if(sinA<0.0)
        dl-=M_PI;
    }
    else
    {
      if(sinA>=0.0)
        dl+=M_PI;
    }

  }
  L_res=L0+CountDeg*(dl-d);
  if(L_res>180.0) L_res-=360.0;
  else if(L_res<=-180.0) L_res+=360.0;
  q=0.9966471395*sqrt(1.0-sin_u2*sin_u2);
  if(q==0.0)
  {
    if(sin_u2>=0.0)
      F_res=90.0;
    else F_res=-90.0;
  }
  else
    F_res=CountDeg*atan(sin_u2/q);
  if(fabs(F_res)>90.0 || fabs(L_res)>180.0) return 1;
  *F=F_res;
  *L=L_res;
  return 0;
}



//! Вычисление длины локсодромии и локсодромический пеленг.
/*! Вычисляет длину локсодромии и локсодромический пеленг между точками на эллипсоиде ПЗ-90.
\param F Широта, градус
\param L Долгота, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param S Длина локсодромии, м
\param A Локсодромический пеленг, градус
\return 0 - успех
          иначе - ошибка
*/
int PZ90FLtoLoxodromeSA(double F,double L,double F0,double L0,double* S,double* A)
{
  double x1,y1,x2,cosA;
  if(PZ90FLtoMXYr(F,L,F0,L0,&x1,&y1)) /* Вычисление прямоугольных координат проекции Меркатора */
  {
    *S=0.0;
    *A=0.0;
    return 1;
  }
  XYtoPolar(x1,y1,S,A);
  cosA=cos((*A)/CountDeg);
  x1=PZ90MeridianLength(F0);
  x2=PZ90MeridianLength(F);
  x2-=x1;
  if(fabs(cosA)<=0.00001 || fabs(x2)<=0.00001)
  {
    double sinF;
    F0=F0/CountDeg;
    sinF=sin(F0);
    *S=fabs( (PZ90_a*cos(F0)*(L-L0)) / ( CountDeg*sqrt(1.0-PZ90_e2*sinF*sinF) ) );

  }
  else
  {
    *S=fabs(x2/cosA);
  }
  if(*S<=0.0001)
  {
    *A=0.0;
  }
  return 0;

}

//! Вычисление координат по длине локсодромии и локсодромическому пеленгу.
/*! Вычисляет геодезические координаты эллипсоида ПЗ-90 по длине локсодромии и
локсодромическому пеленгу.
\param S Длина локсодромии, м
\param A Локсодромический пеленг, градус
\param F0 Широта репера, градус
\param L0 Долгота репера, градус
\param F Широта, градус
\param L Долгота, градус
\return 0 - успех
          иначе - ошибка
*/
int LoxodromeSAtoPZ90FL(double S,double A,double F0,double L0,double* F,double* L)
{
  double A1,cosA,x1,x2,y2;
  if(S<=0.0001)
  {
    *F=F0;
    *L=L0;
    return 0;
  }
  A1=A/CountDeg;
  cosA=cos(A1);
  x1=PZ90MeridianLength(F0);
  x2=x1+S*cosA;
  if(GXYtoPZ90FLd(x2,0.0,F,L)) return 1;
  if(PZ90FLtoMXYr(*F,L0,F0,L0,&x2,&y2)) return 1;
  if(fabs(x2)<=0.00001 || fabs(cosA)<=0.00001)
  {
    double sinF;
    F0=F0/CountDeg;
    sinF=sin(F0);
    y2=fabs( (CountDeg*S*sqrt(1.0-PZ90_e2*sinF*sinF)) / (PZ90_a*cos(F0)) );
    if(A<=180.0) *L=L0+y2;
    else *L=L0-y2;
    if(*L>180.0) *L-=360.0;
    else if(*L<=-180.0) *L+=360.0;
  }
  else
  {
    y2=x2*tan(A1);
    if(MXYtoPZ90FLr(x2,y2,F0,L0,&x1,L)) return 1;
  }
  return 0;

}


//******************************************************************

/* Функции преобразования между системами координат.
   Функции корректно работают при |F|<=89 градусов. */

// Функции преобразования координат между системами СК-42 и WGS-84.

//! Функция нахождения приращения геодезических координат при переходе между системами СК-42 и WGS-84.
/*! Находит приращение геодезических координат при переходе между системами СК-42 и WGS-84.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param dF Приращение широты, градус
\param dL Приращение долготы, градус
\param dH Приращение высоты, м
\return 0 - успех
          иначе - ошибка
*/
int WK_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH)
{
  double sinF1,cosF1,sinL1,cosL1,sin_cosF1,tanF1,sq,M,N,ex,Nde2;
  F1=F1/CountDeg;
  L1=L1/CountDeg;
  sinF1=sin(F1);
  cosF1=cos(F1);
  sinL1=sin(L1);
  cosL1=cos(L1);
  sin_cosF1=sinF1*cosF1;
  if(fabs(cosF1)>=0.000001)
    tanF1=sinF1/cosF1;
  else tanF1=0.0;
  sq=sqrt(1.0-WK_e2*sinF1*sinF1);
  ex=1.0+WK_e2*(1.0-2.0*sinF1*sinF1);
  M=WK_a*(1.0-WK_e2)/((1.0-WK_e2*sinF1*sinF1)*sq);
  N=WK_a/sq;
  Nde2=N*WK_de2;
  *dF=CountDeg*((WK_e2*WK_da*sin_cosF1)/sq+
                (1.0/(sq*sq)+1.0)*sin_cosF1*Nde2/2.0-
                (WK_dX*cosL1+WK_dY*sinL1)*sinF1+WK_dZ*cosF1)/(M+H1)+
    (WK_wy*cosL1)*ex-CountDeg*WK_m*WK_e2*sin_cosF1;
  if(fabs(cosF1)<0.000001)
    *dL=0.0;
  else
    *dL=CountDeg*(WK_dY*cosL1-WK_dX*sinL1)/((N+H1)*cosF1)+(1.0-WK_e2)*tanF1*(WK_wy*sinL1)-WK_wz;
  *dH=-WK_da*sq+(Nde2*sinF1*sinF1)/2.0+
    (WK_dX*cosL1+WK_dY*sinL1)*cosF1+WK_dZ*sinF1-N*WK_e2*sin_cosF1*
    (-WK_wy_rad*cosL1)+(WK_a*sq+H1)*WK_m;
  return 0;
}



//! Функция преобразования координат из системы WGS-84 в систему СК-42.
/*! Преобразует координаты из системы WGS-84 в систему СК-42.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int WGS84toSK42(double F1,double L1,double H1,double* F,double* L,double* H)
{
  WK_dFLH(F1,L1,H1,F,L,H);
  *F=F1+(*F);
  *L=L1+(*L);
  *H=H1+(*H);
  return 0;
}



//! Функция преобразования координат из системы СК-42 в систему WGS-84.
/*!  Преобразует координаты из системы СК-42 в систему WGS-84.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int SK42toWGS84(double F1,double L1,double H1,double* F,double* L,double* H)
{
  WK_dFLH(F1,L1,H1,F,L,H);
  *F=F1-(*F);
  *L=L1-(*L);
  *H=H1-(*H);
  return 0;
}



// Функции преобразования координат между системами ПЗ-90.02 и WGS-84.

//! Функция нахождения приращения геодезических координат при переходе между системами ПЗ-90.02 и WGS-84.
/*! Находит приращение геодезических координат при переходе между системами ПЗ-90.02 и WGS-84.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param dF Приращение широты, градус
\param dL Приращение долготы, градус
\param dH Приращение высоты, м
\return 0 - успех
          иначе - ошибка
*/
int PZ90_02W_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH)
{
  double sinF1,cosF1,sinL1,cosL1,sin_cosF1,sq,M,N,Nde2;
  F1=F1/CountDeg;
  L1=L1/CountDeg;
  sinF1=sin(F1);
  cosF1=cos(F1);
  sinL1=sin(L1);
  cosL1=cos(L1);
  sin_cosF1=sinF1*cosF1;
  sq=sqrt(1.0-PZ90_02W_e2*sinF1*sinF1);
  M=PZ90_02W_a*(1.0-PZ90_02W_e2)/((1.0-PZ90_02W_e2*sinF1*sinF1)*sq);
  N=PZ90_02W_a/sq;
  Nde2=N*PZ90_02W_de2;
  *dF=CountDeg*((PZ90_02W_e2*PZ90_02W_da*sin_cosF1)/sq+
                (1.0/(sq*sq)+1.0)*sin_cosF1*Nde2/2.0-
                (PZ90_02W_dX*cosL1+PZ90_02W_dY*sinL1)*sinF1+PZ90_02W_dZ*cosF1)/(M+H1);
  if(fabs(cosF1)<0.000001)
    *dL=0.0;
  else
    *dL=CountDeg*(PZ90_02W_dY*cosL1-PZ90_02W_dX*sinL1)/((N+H1)*cosF1);
  *dH=-PZ90_02W_da*sq+(Nde2*sinF1*sinF1)/2.0+
    (PZ90_02W_dX*cosL1+PZ90_02W_dY*sinL1)*cosF1+PZ90_02W_dZ*sinF1;
  return 0;
}




//! Функция преобразования координат из системы WGS-84 в систему ПЗ-90.02
/*!  Преобразует координаты из системы WGS-84 в систему ПЗ-90.02
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int WGS84toPZ90_02(double F1,double L1,double H1,double* F,double* L,double* H)
{

  PZ90_02W_dFLH(F1,L1,H1,F,L,H);
  *F=F1-(*F);
  *L=L1-(*L);
  *H=H1-(*H);
  return 0;
}



//! Функция преобразования координат из системы ПЗ-90.02 в систему WGS-84.
/*!  Преобразует координаты из системы ПЗ-90.02 в систему WGS-84.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int PZ90_02toWGS84(double F1,double L1,double H1,double* F,double* L,double* H)
{

  PZ90_02W_dFLH(F1,L1,H1,F,L,H);
  *F=F1+(*F);
  *L=L1+(*L);
  *H=H1+(*H);
  return 0;
}


// Функции преобразования координат между системами ПЗ-90.02 и СК-42.

//! Функция нахождения приращения геодезических координат при переходе между системами ПЗ-90.02 и СК-42.
/*! Находит приращение геодезических координат при переходе между системами ПЗ-90.02 и СК-42.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param dF Приращение широты, градус
\param dL Приращение долготы, градус
\param dH Приращение высоты, м
\return 0 - успех
          иначе - ошибка
*/
int PZ90_02K_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH)
{
  double sinF1,cosF1,sinL1,cosL1,sin_cosF1,tanF1,sq,M,N,ex,Nde2;
  F1=F1/CountDeg;
  L1=L1/CountDeg;
  sinF1=sin(F1);
  cosF1=cos(F1);
  sinL1=sin(L1);
  cosL1=cos(L1);
  sin_cosF1=sinF1*cosF1;
  if(fabs(cosF1)>=0.000001)
    tanF1=sinF1/cosF1;
  else tanF1=0.0;
  sq=sqrt(1.0-PZ90_02K_e2*sinF1*sinF1);
  ex=1.0+PZ90_02K_e2*(1.0-2.0*sinF1*sinF1);
  M=PZ90_02K_a*(1.0-PZ90_02K_e2)/((1.0-PZ90_02K_e2*sinF1*sinF1)*sq);
  N=PZ90_02K_a/sq;
  Nde2=N*PZ90_02K_de2;
  *dF=CountDeg*((PZ90_02K_e2*PZ90_02K_da*sin_cosF1)/sq+
                (1.0/(sq*sq)+1.0)*sin_cosF1*Nde2/2.0-
                (PZ90_02K_dX*cosL1+PZ90_02K_dY*sinL1)*sinF1+PZ90_02K_dZ*cosF1)/(M+H1)+
    (PZ90_02K_wy*cosL1)*ex-CountDeg*PZ90_02K_m*PZ90_02K_e2*sin_cosF1;
  if(fabs(cosF1)<0.000001)
    *dL=0.0;
  else
    *dL=CountDeg*(PZ90_02K_dY*cosL1-PZ90_02K_dX*sinL1)/((N+H1)*cosF1)+(1.0-PZ90_02K_e2)*tanF1*
    (PZ90_02K_wy*sinL1)-PZ90_02K_wz;
  *dH=-PZ90_02K_da*sq+(Nde2*sinF1*sinF1)/2.0+
    (PZ90_02K_dX*cosL1+PZ90_02K_dY*sinL1)*cosF1+PZ90_02K_dZ*sinF1-N*PZ90_02K_e2*sin_cosF1*
    (-PZ90_02K_wy_rad*cosL1)+(PZ90_02K_a*sq+H1)*PZ90_02K_m;
  return 0;
}




//! Функция преобразования координат из системы СК-42 в систему ПЗ-90.02.
/*!  Преобразует координаты из системы СК-42 в систему ПЗ-90.02.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int SK42toPZ90_02(double F1,double L1,double H1,double* F,double* L,double* H)
{

  PZ90_02K_dFLH(F1,L1,H1,F,L,H);
  *F=F1-(*F);
  *L=L1-(*L);
  *H=H1-(*H);
  return 0;
}



//! Функция преобразования координат из системы ПЗ-90.02 в систему СК-42.
/*! Преобразует координаты из системы ПЗ-90.02 в систему СК-42.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int PZ90_02toSK42(double F1,double L1,double H1,double* F,double* L,double* H)
{

  PZ90_02K_dFLH(F1,L1,H1,F,L,H);
  *F=F1+(*F);
  *L=L1+(*L);
  *H=H1+(*H);
  return 0;
}


// Функции преобразования координат между системами ПЗ-90.02 и ПЗ-90.

//! Функция нахождения приращения геодезических координат при переходе между системами ПЗ-90.02 и ПЗ-90.
/*! Находит приращение геодезических координат при переходе между системами ПЗ-90.02 и ПЗ-90.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param dF Приращение широты, градус
\param dL Приращение долготы, градус
\param dH Приращение высоты, м
\return 0 - успех
          иначе - ошибка
*/
int PZ90_02PZ90_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH)
{
  double sinF1,cosF1,sinL1,cosL1,sin_cosF1,sq,M,N,ex;//,Nde2;
  F1=F1/CountDeg;
  L1=L1/CountDeg;
  sinF1=sin(F1);
  cosF1=cos(F1);
  sinL1=sin(L1);
  cosL1=cos(L1);
  sin_cosF1=sinF1*cosF1;
  sq=sqrt(1.0-PZ90_e2*sinF1*sinF1);
  ex=1.0+PZ90_e2*(1.0-2.0*sinF1*sinF1);
  M=PZ90_a*(1.0-PZ90_e2)/((1.0-PZ90_e2*sinF1*sinF1)*sq);
  N=PZ90_a/sq;
  *dF=CountDeg*(-(PZ90_02PZ90_dX*cosL1+PZ90_02PZ90_dY*sinL1)*sinF1+
                PZ90_02PZ90_dZ*cosF1)/(M+H1)  -CountDeg*PZ90_02PZ90_m*PZ90_e2*sin_cosF1;
  if(fabs(cosF1)<0.000001)
    *dL=0.0;
  else
    *dL=CountDeg*(PZ90_02PZ90_dY*cosL1-PZ90_02PZ90_dX*sinL1)/((N+H1)*cosF1)-PZ90_02PZ90_wz;
  *dH=  (PZ90_02PZ90_dX*cosL1+PZ90_02PZ90_dY*sinL1)*cosF1+PZ90_02PZ90_dZ*sinF1+(PZ90_a*sq+H1)*PZ90_02PZ90_m;
  return 0;
}




//! Функция преобразования координат из системы ПЗ-90 в систему ПЗ-90.02.
/*! Преобразует координаты из системы ПЗ-90 в систему ПЗ-90.02.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int PZ90toPZ90_02(double F1,double L1,double H1,double* F,double* L,double* H)
{

  PZ90_02PZ90_dFLH(F1,L1,H1,F,L,H);
  *F=F1-(*F);
  *L=L1-(*L);
  *H=H1-(*H);
  return 0;
}



//! Функция преобразования координат из системы ПЗ-90.02 в систему ПЗ-90.
/*! Преобразует координаты из системы ПЗ-90.02 в систему ПЗ-90.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int PZ90_02toPZ90(double F1,double L1,double H1,double* F,double* L,double* H)
{

  PZ90_02PZ90_dFLH(F1,L1,H1,F,L,H);
  *F=F1+(*F);
  *L=L1+(*L);
  *H=H1+(*H);
  return 0;
}


// Функции преобразования координат между системами ПЗ-90 и СК-42.

//! Функция нахождения приращения геодезических координат при переходе между системами ПЗ-90 и СК-42.
/*! Находит приращение геодезических координат при переходе между системами ПЗ-90 и СК-42.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param dF Приращение широты, градус
\param dL Приращение долготы, градус
\param dH Приращение высоты, м
\return 0 - успех
          иначе - ошибка
*/
int PZ90K_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH)
{
  double sinF1,cosF1,sinL1,cosL1,sin_cosF1,tanF1,sq,M,N,ex,Nde2;
  F1=F1/CountDeg;
  L1=L1/CountDeg;
  sinF1=sin(F1);
  cosF1=cos(F1);
  sinL1=sin(L1);
  cosL1=cos(L1);
  sin_cosF1=sinF1*cosF1;
  if(fabs(cosF1)>=0.000001)
    tanF1=sinF1/cosF1;
  else tanF1=0.0;
  sq=sqrt(1.0-PZ90K_e2*sinF1*sinF1);
  ex=1.0+PZ90K_e2*(1.0-2.0*sinF1*sinF1);
  M=PZ90K_a*(1.0-PZ90K_e2)/((1.0-PZ90K_e2*sinF1*sinF1)*sq);
  N=PZ90K_a/sq;
  Nde2=N*PZ90K_de2;
  *dF=CountDeg*((PZ90K_e2*PZ90K_da*sin_cosF1)/sq+
                (1.0/(sq*sq)+1.0)*sin_cosF1*Nde2/2.0-
                (PZ90K_dX*cosL1+PZ90K_dY*sinL1)*sinF1+PZ90K_dZ*cosF1)/(M+H1)+
    (PZ90K_wy*cosL1)*ex;
  if(fabs(cosF1)<0.000001)
    *dL=0.0;
  else
    *dL=CountDeg*(PZ90K_dY*cosL1-PZ90K_dX*sinL1)/((N+H1)*cosF1)+(1.0-PZ90K_e2)*tanF1*
    (PZ90K_wy*sinL1)-PZ90K_wz;
  *dH=-PZ90K_da*sq+(Nde2*sinF1*sinF1)/2.0+
    (PZ90K_dX*cosL1+PZ90K_dY*sinL1)*cosF1+PZ90K_dZ*sinF1-N*PZ90K_e2*sin_cosF1*(-PZ90K_wy_rad*cosL1);
  return 0;
}




//! Функция преобразования координат из системы СК-42 в систему ПЗ-90.
/*! Преобразует координаты из системы СК-42 в систему ПЗ-90.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int SK42toPZ90(double F1,double L1,double H1,double* F,double* L,double* H)
{

  PZ90K_dFLH(F1,L1,H1,F,L,H);
  *F=F1-(*F);
  *L=L1-(*L);
  *H=H1-(*H);
  return 0;
}



//! Функция преобразования координат из системы ПЗ-90 в систему СК-42.
/*!  Преобразует координаты из системы ПЗ-90 в систему СК-42.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int PZ90toSK42(double F1,double L1,double H1,double* F,double* L,double* H)
{

  PZ90K_dFLH(F1,L1,H1,F,L,H);
  *F=F1+(*F);
  *L=L1+(*L);
  *H=H1+(*H);
  return 0;
}


// Функции преобразования координат между системами ПЗ-90 и WGS-84.

//! Функция нахождения приращения геодезических координат при переходе между системами ПЗ-90 и WGS-84.
/*! Находит приращение геодезических координат при переходе между системами ПЗ-90 и WGS-84.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param dF Приращение широты, градус
\param dL Приращение долготы, градус
\param dH Приращение высоты, м
\return 0 - успех
          иначе - ошибка
*/
int PZ90W_dFLH(double F1,double L1,double H1,double* dF,double* dL,double* dH)
{
  double sinF1,cosF1,sinL1,cosL1,sin_cosF1,sq,M,N,ex,Nde2;
  F1=F1/CountDeg;
  L1=L1/CountDeg;
  sinF1=sin(F1);
  cosF1=cos(F1);
  sinL1=sin(L1);
  cosL1=cos(L1);
  sin_cosF1=sinF1*cosF1;
  sq=sqrt(1.0-PZ90W_e2*sinF1*sinF1);
  ex=1.0+PZ90W_e2*(1.0-2.0*sinF1*sinF1);
  M=PZ90W_a*(1.0-PZ90W_e2)/((1.0-PZ90W_e2*sinF1*sinF1)*sq);
  N=PZ90W_a/sq;
  Nde2=N*PZ90W_de2;
  *dF=CountDeg*((PZ90W_e2*PZ90W_da*sin_cosF1)/sq+
                (1.0/(sq*sq)+1.0)*sin_cosF1*Nde2/2.0-
                (PZ90W_dX*cosL1+PZ90W_dY*sinL1)*sinF1+PZ90W_dZ*cosF1)/(M+H1)
    -CountDeg*PZ90W_m*PZ90W_e2*sin_cosF1;
  if(fabs(cosF1)<0.000001)
    *dL=0.0;
  else
    *dL=CountDeg*(PZ90W_dY*cosL1-PZ90W_dX*sinL1)/((N+H1)*cosF1)-PZ90W_wz;
  *dH=-PZ90W_da*sq+(Nde2*sinF1*sinF1)/2.0+
    (PZ90W_dX*cosL1+PZ90W_dY*sinL1)*cosF1+PZ90W_dZ*sinF1+(PZ90W_a*sq+H1)*PZ90W_m;
  return 0;
}




//! Функция преобразования координат из системы WGS-84 в систему ПЗ-90.
/*! Преобразует координаты из системы WGS-84 в систему ПЗ-90.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int WGS84toPZ90(double F1,double L1,double H1,double* F,double* L,double* H)
{

  PZ90W_dFLH(F1,L1,H1,F,L,H);
  *F=F1-(*F);
  *L=L1-(*L);
  *H=H1-(*H);
  return 0;
}



//! Функция преобразования координат из системы ПЗ-90 в систему WGS-84.
/*! Преобразует координаты из системы ПЗ-90 в систему WGS-84.
\param F1 Широта, градус
\param L1 Долгота, градус
\param H1 Высота, м
\param F Широта, градус
\param L Долгота, градус
\param H Высота, м
\return 0 - успех
          иначе - ошибка
*/
int PZ90toWGS84(double F1,double L1,double H1,double* F,double* L,double* H)
{

  PZ90W_dFLH(F1,L1,H1,F,L,H);
  *F=F1+(*F);
  *L=L1+(*L);
  *H=H1+(*H);
  return 0;
}

//******************************************************************


//! Перевод декартовой системы координат в полярную.
/*!  Переводит декартовую систему координат в полярную.
\param x Декартовые координаты,м
\param y Декартовые  координаты,м
\param r Модуль радиус-вектора, м
\param f Угол между радиус-вектором и положительным направлением оси ox, градус
\return 0 - успех
          иначе - ошибка
*/
int XYtoPolar(double x,double y,double* r,double* f)
{

  *r=sqrt(x*x+y*y);
  if (*r<0.00000000001) {*f=0.0; return 0;}
  if(y>=0.0) *f=CountDeg*acos(x/(*r));
  else *f=180.0+CountDeg*acos(-x/(*r));
  return 0;
}



//! Перевод полярной системы координат в декартовую.
/*!  Переводит полярную систему координат в декартовую.
\param r Модуль радиус-вектора, м
\param f Угол между радиус-вектором и положительным направлением оси ox, градус
\param x Декартовые координаты,м
\param y Декартовые  координаты,м
\return 0 - успех
          иначе - ошибка
*/
int PolartoXY(double r,double f,double* x,double* y)
{
  if(r<0.0)
  {
    *x=0.0;
    *y=0.0;
    return 1;
  }
  f=f/CountDeg;
  *x=r*cos(f);
  *y=r*sin(f);
  return 0;
}
/* \} */
